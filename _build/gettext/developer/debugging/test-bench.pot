# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 23:45+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../developer/debugging/test-bench.rst:3
#: e59d04550fa24472a83520fca120f866
msgid "How to set up a test bench"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:6
#: 0cce2074f46d428f86b6199d2d7c7b7e
msgid "This guide shows how to set up simple test bench that automatically test your code you’re about to push. It is written especially for ``core3`` branch of ``core-admin.git`` repo, but some ideas are universal."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:10
#: f47c95e5344f42b8941ccc3b6c95a614
msgid "We will set up a spare machine (bare metal, not a virtual) that will be hosting our experimental Dom0. We will communicate with it via Ethernet and SSH. This tutorial assumes you are familiar with :doc:`QubesBuilder </developer/building/qubes-builder>` and you have it set up and running flawlessly."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:16
#: 07a3f702b96d4f07850eb9570235c84f
msgid "**Notice:** This setup intentionally weakens some security properties in the testing system. So make sure you understand the risks and use exclusively for testing."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:21
#: 11b8b75670b44b358bdd2245d45c2834
msgid "Setting up the Machine"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:25
#: aa5d3852743e46fa9e46b78a1d82b78a
msgid "Install ISO"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:28
#: fca55ffa104b4620a6c7a953df8164d3
msgid "First, do a clean install from the ``.iso`` :doc:`you built </developer/building/qubes-iso-building>` or grabbed elsewhere (for example `here <https://forum.qubes-os.org/t/qubesos-4-1-alpha-signed-weekly-builds/3601>`__)."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:32
#: a8c72f2bf6bd4d00b8c556ae55bbef43
msgid "Enabling Network Access in Dom0"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:35
#: df0d744d881a4184bb30a5feee83d307
msgid "Internet access is intentionally disabled by default in dom0. But to ease the deployment process we will give it access. The following steps should be done in ``dom0``."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:39
#: 742c638df4af452598aa98c6e356dea7
msgid "**Note:** the following assume you have only one network card. If you have two, pick one and leave the other attached to ``sys-net``."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:42
#: 9d71a0b535014acdaddcb3e9f104f4da
msgid "Remove the network card (PCI device) from ``sys-net``"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:44
#: 8cefd4adb095499c891b3842c0df0052
msgid "Restart your computer (for the removal to take effect)"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:46
#: e664f7b85abe4cdeaa9cd5a82a2e3cb1
msgid "Install ``dhcp-client`` and ``openssh-server`` on your testbench’s dom0."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:49
#: 85cd1d37e71d472aae76c7e0f6caad8f
msgid "Save the following script in ``/home/user/bin/dom0_network.sh`` and make it executable. It should enable your network card in dom0. *Be sure to adjust the script’s variables to suit your needs.*"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:91
#: f97777635b5442f0bba28be2545bfd57
msgid "Configure your DHCP server so your testbench gets static IP and connect your machine to your local network. You should ensure that your testbench can reach the Internet."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:95
#: 82565f9c37e04da6b5d03733c06f8078
msgid "You’ll need to run the above script on every startup. To automate this save the following systemd service ``/etc/systemd/system/dom0-network-direct.service``"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:113
#: efd495530897447196a1a426e18c9d90
msgid "Then, enable and start the SSH Server and the script on boot:"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:126
#: 12e9f5df1ca74d09a52a924fedf967ec
msgid "**Note:** If you want to install additional software in dom0 and your only network card was assigned to dom0, then *instead* of the usual ``sudo qubes-dom0-update <PACKAGE>`` now you run ``sudo dnf --setopt=reposdir=/etc/yum.repos.d install <PACKAGE>``."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:132
#: c3adc67cb5dc453b99cc60d250c3e28c
msgid "Install Tests and Their Dependencies"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:135
#: 842830ffe543488f97c9813b12b394bf
msgid "A regular Qubes installation isn’t ready to run the full suite of tests. For example, in order to run the `Split GPG tests <https://github.com/QubesOS/qubes-app-linux-split-gpg/blob/4bc201bb70c011119eed19df25dc5b46120d04ed/tests/splitgpg/tests.py>`__ you need to have the ``qubes-gpg-split-tests`` package installed in your app qubes."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:140
#: 93b6b5c65792426aa83700244168cbc9
msgid "Because of the above reason, some additional configurations need to be done to your testing environment. This can be done in an automated manner with the help of the :doc:`Salt </user/advanced-topics/salt>` configuration that provisions the :doc:`automated testing environment </developer/debugging/automated-tests>`."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:145
#: 8168548b6b214feea34c5896bb74953a
msgid "The following commands should work for you, but do keep in mind that the provisioning scripts are designed for the `openQA environment <https://openqa.qubes-os.org/>`__ and not your specific local testing system. Run the following in ``dom0``:"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:178
#: 20280c4f3faa4877a8e44e956ba7f11a
msgid "Development VM"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:182
#: ec798e24b0b749e9ade3f6e84e321ae3
msgid "SSH"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:185
#: 9ec4138f1c21436b9afd29d9c73ce1e3
msgid "Arrange firewall so you can reach the testbench from your ``qubes-dev`` VM. Generate SSH key in ``qubes-dev``:"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:194
#: 1769e03f91c14fc9bf86663a3355cf06
msgid "Add the following section in ``.ssh/config`` in ``qubes-dev``:"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:207
#: 9edcde0e59594ecba55651a9f2ebdd7c
msgid "Passwordless SSH Login"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:210
#: c8b2adcb677d4bf091e5af135297e24f
msgid "To log to your testbench without entering password every time, copy your newly generated public key (``id_ecdsa.pub``) to ``~/.ssh/authorized_keys`` on your testbench. You can do this easily by running this command on ``qubes-dev``: ``ssh-copy-id -i ~/.ssh/id_ecdsa.pub user@192.168.123.45`` (substituting with the actual username address of your testbench)."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:218
#: 641fe0ade65b4ee3b80b7926d572d83b
msgid "Scripting"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:221
#: 0fbf1e8ef6e142f59c3dffa0cb572f65
msgid "This step is optional, but very helpful. Put these scripts somewhere in your ``${PATH}``, like ``/usr/local/bin``."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:224
#: 4b9c6e106103425899c2ac8a430ebe5a
msgid "``qtb-runtests``:"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:233
#: ddb6d12bc994455e9f24cbd48ebec5c3
msgid "``qtb-install``:"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:257
#: 11b9d8372c1f429a95852975cbeef93c
msgid "``qtb-iterate``:"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:278
#: 2178b156f1314ca796261469cadd6dc9
msgid "Hooking git"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:281
#: ad1f8912501c4088821c405d1e3fb88c
msgid "I (woju) have those two git hooks. They ensure tests are passing (or are marked as expected failure) when committing and pushing. For committing it is only possible to run tests that may be executed from git repo (even if the rest were available, I probably wouldn’t want to do that). For pushing, I also install RPM and run tests on testbench."
msgstr ""

#: ../../../developer/debugging/test-bench.rst:287
#: 227e684c33934735952c18f1532b2de9
msgid "``core-admin/.git/hooks/pre-commit``: (you may retain also the default hook, here omitted for readability)"
msgstr ""

#: ../../../developer/debugging/test-bench.rst:299
#: ce894fa6a50d4059b3af57138accf857
msgid "``core-admin/.git/hooks/pre-push``:"
msgstr ""
