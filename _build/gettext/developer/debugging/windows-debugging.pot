# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 23:45+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../developer/debugging/windows-debugging.rst:3
#: 4b867a6dfd10433685c147068f46c80c
msgid "Windows debugging"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:6
#: f14be87060284103aacbd64af44305db
msgid "Debugging Windows code can be tricky in a virtualized environment. The guide below assumes Xen hypervisor and Windows 7 VMs."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:9
#: 1777946143ac4e3f97137ede1ad8e1e7
msgid "User-mode debugging is usually straightforward if it can be done on one machine. Just duplicate your normal debugging environment in the VM."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:12
#: 04da4d14dbb2432b808d7cd771154cf1
msgid "Things get complicated if you need to perform kernel debugging or troubleshoot problems that only manifest on system boot, user logoff or similar. For that you need two Windows VMs: the *host* and the *target*. The *host* will contain `WinDbg <https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85).aspx>`__ installation, your source code and private symbols. The *target* will run the code being debugged. Both will be linked by virtual serial ports."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:21
#: 5b85e04cc6dc4c3f866b4939db7df35b
msgid "First, you need to prepare separate copies of both *target* and *host* VM configuration files with some changes. Copy the files from **/var/lib/qubes/appvms/vmname/vmname.conf** to some convenient location, let’s call them **host.conf** and **target.conf**."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:26
#: fb872a42652143e89ee5e78ee8984ae3
msgid "In both copied files add the following line at the end: ``serial = 'pty'``. This will make Xen connect VM’s serial ports to dom0’s ptys."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:30
#: 10b338e4a265435694b45ef73a6f8f08
msgid "From now on you need to start both VMs like this: ``qvm-start --custom-config=/your/edited/host.conf host``"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:33
#: a3f0ebb838e746db9f5febe27986ccbc
msgid "To connect both VM serial ports together you will either need `socat <http://www.dest-unreach.org/socat/>`__ or a custom utility described later."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:37
#: d4088713843649bca52c512993be60d7
msgid "To determine which dom0 pty corresponds to VM’s serial port you need to read xenstore, example script below:"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:51
#: 094321576638472eb22b893456bf00a8
msgid "Pass it a running VM name and it will output the corresponding pty name."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:53
#: 8414c7d6a7a94afdb9d63a8dff50549f
msgid "To connect both ptys you can use `socat <http://www.dest-unreach.org/socat/>`__ like that:"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:69
#: 001b1794fe35425fb118c287ca729ca9
msgid "…but there is a catch. Xen seems to process the traffic that goes through serial ports and changes all **0x0a** bytes into **0x0d, 0x0a** pairs (newline conversion). I didn’t find a way to turn that off (setting ptys to raw mode didn’t change anything) and it’s not mentioned anywhere on the Internet, so maybe it’s something on my system. If the above script works for you then you don’t need anything more in dom0."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:76
#: b0dac1c09d134ba7ad29d3249a01ee46
msgid "On the *target* system, run ``bcdedit /set debug on`` on the console to turn on kernel debugging. It defaults to the first serial port."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:79
#: 5bcc25be80034170a0e1e029c488a9d7
msgid "On the *host* system, install `WinDbg <http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063(v=vs.85).aspx>`__ and start the kernel debug (Ctrl-K), choose **com1** as the debug port."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:84
#: e221930735414bcc808c133c1417f176
msgid "Reboot the *target* VM."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:86
#: 6931fc6565b4477595988060886b867e
msgid "Run the above shell script in dom0."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:88
#: 51cface02c394f7ea89584a2ef6b5bf5
msgid "If everything is fine you should see the proper kernel debugging output in WinDbg. However, if you see something like that:"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:114
#: c5733e7d8ab0432d83603b74340d7d47
msgid "…then you’re most likely a victim of the CRLF issue mentioned above. To get around it I wrote a small utility that basically does what socat would do and additionally corrects those replaced bytes in the stream. It’s not pretty but it works:"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:269
#: 985cefa179d44e3c8d44e862148f8e24
msgid "Debugging HVMs in the Qubes R4.0"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:272
#: 0375402289a3429da63b448bba75e8e8
msgid "There are two main issues to be adopted to get all things to work in the R4.0."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:276
#: b473be91a1d541fc95671961e00b0aa4
msgid "Add a virtual serial port"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:279
#: 6f998621618e4ec4a2b8e2699c1acab5
msgid "Qemu in the stub domain with virtual serial port added in a recommended way (``<serial type=\"pty\"/>``) fails to start (Could not open ‘/dev/hvc1’: No such device). It seems like a lack of multiple xen consoles support/configuration. The only way that I have found is to attach serial port explicitly to the available console."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:285
#: 181626b67e484a74b8cc894c40202575
msgid "Unpack stub domain in dom0:"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:299
#: 2a2cc389e5fa4a229eaed9451a3e93ae
msgid "Edit Init script to remove last loop and to add “-serial /dev/hvc0” to the qemu command line."
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:302
#: fe61c5b1689e45fab8da572a7ce02644
msgid "Apply changes:"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:315
#: 047792ffa84541679da5aca15b13f66c
msgid "Connect two consoles"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:318
#: 250b21b17fb149d19d2ef99edac42fd5
msgid "Run the following script:"
msgstr ""

#: ../../../developer/debugging/windows-debugging.rst:333
#: c6ad7aa3a897417a91b4145bf202d9de
msgid "Happy debugging!"
msgstr ""
