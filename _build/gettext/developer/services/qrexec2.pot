# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 23:45+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../developer/services/qrexec2.rst:3
#: ed8b5a904be34652844743636b14ba35
msgid "Qrexec v2 (deprecated)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:6
#: 5c86d9dd490c4211b0ba2985bc69de9f
msgid "(*This page is about qrexec v2. For qrexec v3, see* :doc:`here </developer/services/qrexec>` *.*)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:8
#: 853799c92a4f45769de0277410e2879e
msgid "Qubes **qrexec** is a framework for implementing inter-VM (incl. Dom0-VM) services. It offers a mechanism to start programs in VMs, redirect their stdin/stdout, and a policy framework to control this all."
msgstr ""

#: ../../../developer/services/qrexec2.rst:14
#: db2fd6d5107e42a2b90e36f254344b0a
msgid "Qrexec basics"
msgstr ""

#: ../../../developer/services/qrexec2.rst:17
#: b0df3f1dec5844cebe0494c270ee5774
msgid "During each domain creation a process named ``qrexec-daemon`` is started in dom0, and a process named ``qrexec-agent`` is started in the VM. They are connected over ``vchan`` channel."
msgstr ""

#: ../../../developer/services/qrexec2.rst:21
#: e483e794da584104a09d592da0c002ef
msgid "Typically, the first thing that a ``qrexec-client`` instance does is to send a request to ``qrexec-agent`` to start a process in the VM. From then on, the stdin/stdout/stderr from this remote process will be passed to the ``qrexec-client`` process."
msgstr ""

#: ../../../developer/services/qrexec2.rst:26
#: 9755d6414cf64a458475598d8cad33fa
msgid "E.g., to start a primitive shell in a VM type the following in Dom0 console:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:34
#: bde519b087ae43c8b1c9c9b0afb9c46f
msgid "The string before first semicolon specifies what user to run the command as."
msgstr ""

#: ../../../developer/services/qrexec2.rst:37
#: 94253dae48e341c88d02b014a1a0f2d0
msgid "Adding ``-e`` on the ``qrexec-client`` command line results in mere command execution (no data passing), and ``qrexec-client`` exits immediately after sending the execution request."
msgstr ""

#: ../../../developer/services/qrexec2.rst:41
#: 5294a08da0d5422ba641dc3b6a4f5744
msgid "There is also the ``-l <local program>`` flag, which directs ``qrexec-client`` to pass stdin/stdout of the remote program not to its stdin/stdout, but to the (spawned for this purpose) ``<local program>``."
msgstr ""

#: ../../../developer/services/qrexec2.rst:45
#: 4ada78224e2d442db28c43c1ade79e66
msgid "The ``qvm-run`` command is heavily based on ``qrexec-client``. It also takes care of additional activities (e.g., starting the domain, if it is not up yet, and starting the GUI daemon). Thus, it is usually more convenient to use ``qvm-run``."
msgstr ""

#: ../../../developer/services/qrexec2.rst:50
#: 6b309298e06d4ec0ae9459bdaded121a
msgid "There can be almost arbitrary number of ``qrexec-client`` processes for a domain (i.e., ``qrexec-client`` processes connected to the same ``qrexec-daemon``); their data is multiplexed independently."
msgstr ""

#: ../../../developer/services/qrexec2.rst:54
#: 4e860cce14314215b9d105ac1e820713
msgid "There is a similar command line utility available inside Linux AppVMs (note the ``-vm`` suffix): ``qrexec-client-vm`` that will be described in subsequent sections."
msgstr ""

#: ../../../developer/services/qrexec2.rst:59
#: 6f2730c284904708827d7d6ab1063767
msgid "Qubes RPC services"
msgstr ""

#: ../../../developer/services/qrexec2.rst:62
#: eb755d78d0d5474487253803f5b423a6
msgid "Apart from simple Dom0->VM command executions, as discussed above, it is also useful to have more advanced infrastructure for controlled inter-VM RPC/services. This might be used for simple things like inter-VM file copy operations, as well as more complex tasks like starting a DispVM, and requesting it to do certain operations on a handed file(s)."
msgstr ""

#: ../../../developer/services/qrexec2.rst:68
#: 1e38583558bc46daa405e0ff1db20b7c
msgid "Instead of implementing complex RPC-like mechanisms for inter-VM communication, Qubes takes a much simpler and pragmatic approach and aims to only provide simple *pipes* between the VMs, plus ability to request *pre-defined* programs (servers) to be started on the other end of such pipes, and a centralized policy (enforced by the ``qrexec-policy`` process running in dom0) which says which VMs can request what services from what VMs."
msgstr ""

#: ../../../developer/services/qrexec2.rst:76
#: e1151435ccd04382b1313dc0da988d9d
msgid "Thanks to the framework and automatic stdin/stdout redirection, RPC programs are very simple; both the client and server just use their stdin/stdout to pass data. The framework does all the inner work to connect these file descriptors to each other via ``qrexec-daemon`` and ``qrexec-agent``. Additionally, DispVMs are tightly integrated; RPC to a DispVM is a simple matter of using a magic ``$dispvm`` keyword as the target VM name."
msgstr ""

#: ../../../developer/services/qrexec2.rst:84
#: 2b0c5b3bd3e7433bb46a2064b6eb69cf
msgid "All services in Qubes are identified by a single string, which by convention takes a form of ``qubes.ServiceName``. Each VM can provide handlers for each of the known services by providing a file in ``/etc/qubes-rpc/`` directory with the same name as the service it is supposed to handle. This file will then be executed by the qrexec service, if the dom0 policy allowed the service to be requested (see below). Typically, the files in ``/etc/qubes-rpc/`` contain just one line, which is a path to the specific binary that acts as a server for the incoming request, however they might also be the actual executable themselves. Qrexec framework is careful about connecting the stdin/stdout of the server process with the corresponding stdin/stdout of the requesting process in the requesting VM (see example Hello World service described below)."
msgstr ""

#: ../../../developer/services/qrexec2.rst:99
#: eb2c78d69dfd4a61984b790563fa6edd
msgid "Qubes RPC administration"
msgstr ""

#: ../../../developer/services/qrexec2.rst:102
#: 24793025c5b442e186193ba6be33d113
msgid "Besides each VM needing to provide explicit programs to serve each supported service, the inter-VM service RPC is also governed by a central policy in Dom0."
msgstr ""

#: ../../../developer/services/qrexec2.rst:106
#: e78d0c72e2c042828230b0de8ea6a96c
msgid "In dom0, there is a bunch of files in ``/etc/qubes-rpc/policy/`` directory, whose names describe the available RPC actions; their content is the RPC access policy database. Some example of the default services in Qubes are:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:125
#: 21558cffe0564985818c5f3fde5425ae
msgid "These files contain lines with the following format:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:133
#: 320ee8545a974310a87a91b2284d89bf
msgid "You can specify ``srcvm`` and ``destvm`` by name, or by one of ``$anyvm``, ``$dispvm``, ``dom0`` reserved keywords (note string ``dom0`` does not match the ``$anyvm`` pattern; all other names do). Only ``$anyvm`` keyword makes sense in the ``srcvm`` field (service calls from dom0 are currently always allowed, ``$dispvm`` means “new VM created for this particular request” - so it is never a source of request). Currently, there is no way to specify source VM by type, but this is planned for Qubes R3."
msgstr ""

#: ../../../developer/services/qrexec2.rst:142
#: ef4d087d47e74aa2af2d50f31ee366a3
msgid "Whenever a RPC request for service named “XYZ” is received, the first line in ``/etc/qubes-rpc/policy/XYZ`` that matches the actual ``srcvm``/``destvm`` is consulted to determine whether to allow RPC, what user account the program should run in target VM under, and what VM to redirect the execution to. If the policy file does not exist, user is prompted to create one *manually*; if still there is no policy file after prompting, the action is denied."
msgstr ""

#: ../../../developer/services/qrexec2.rst:150
#: d5995d8840bc4ad3bb438ee2382b566a
msgid "On the target VM, the ``/etc/qubes-rpc/XYZ`` must exist, containing the file name of the program that will be invoked."
msgstr ""

#: ../../../developer/services/qrexec2.rst:154
#: 827d59342ea4491686a4c95f8ac2eb2c
msgid "Requesting VM-VM (and VM-Dom0) services execution"
msgstr ""

#: ../../../developer/services/qrexec2.rst:157
#: 678b13625bd04670b4d68c28432bd952
msgid "In a src VM, one should invoke the qrexec client via the following command:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:166
#: 21131bd205684a78bf47244c7d432322
msgid "Note that only stdin/stdout is passed between RPC server and client – notably, no cmdline argument are passed."
msgstr ""

#: ../../../developer/services/qrexec2.rst:169
#: 75bd1963eceb44e68f6bb10dd525cfe8
msgid "The source VM name can be accessed in the server process via ``QREXEC_REMOTE_DOMAIN`` environment variable. (Note the source VM has *no* control over the name provided in this variable–the name of the VM is provided by dom0, and so is trusted.)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:174
#: ae2d4316ccd34ed793461bf55cad2f6f
msgid "By default, stderr of client and server is logged to respective ``/var/log/qubes/qrexec.XID`` files, in each of the VM."
msgstr ""

#: ../../../developer/services/qrexec2.rst:177
#: 21493f81d36e480d86df80114eaff042
msgid "Be very careful when coding and adding a new RPC service! Any vulnerability in a RPC server can be fatal to security of the target VM!"
msgstr ""

#: ../../../developer/services/qrexec2.rst:180
#: 138088ae9d2d4d329f663e183d122ea0
msgid "If requesting VM-VM (and VM-Dom0) services execution *without cmdline helper*, connect directly to ``/var/run/qubes/qrexec-agent-fdpass`` socket as described `below <#all-the-pieces-together-at-work>`__."
msgstr ""

#: ../../../developer/services/qrexec2.rst:184
#: 2d1fcc25213c48069dcf020b83f5cf8c
msgid "Revoking \"Yes to All\" authorization"
msgstr ""

#: ../../../developer/services/qrexec2.rst:187
#: bde336e418934ae5bef063adaff83692
msgid "Qubes RPC policy supports an “ask” action, that will prompt the user whether a given RPC call should be allowed. It is set as default for services such as inter-VM file copy. A prompt window launches in dom0, that gives the user option to click “Yes to All”, which allows the action and adds a new entry to the policy file, which will unconditionally allow further calls for given (service, srcVM, dstVM) tuple."
msgstr ""

#: ../../../developer/services/qrexec2.rst:195
#: e1c01ff6a8e0494caa890c7aee1cc9dc
msgid "In order to remove such authorization, issue this command from a Dom0 terminal (example below for ``qubes.Filecopy`` service):"
msgstr ""

#: ../../../developer/services/qrexec2.rst:203
#: 588f4aef51854e749900a1751dc22077
msgid "and then remove any line(s) ending in “allow” (before the first ``##`` comment) which are the “Yes to All” results."
msgstr ""

#: ../../../developer/services/qrexec2.rst:206
#: 03abc8ca191f4de88e47e64d02566849
msgid "A user might also want to set their own policies in this section. This may mostly serve to prevent the user from mistakenly copying files or text from a trusted to untrusted domain, or vice-versa."
msgstr ""

#: ../../../developer/services/qrexec2.rst:211
#: c36ca9806d1e4fbca84c0618fd8d0dbe
msgid "Qubes RPC \"Hello World\" service"
msgstr ""

#: ../../../developer/services/qrexec2.rst:214
#: 1c619f15f12b4dcdb60d517933886bb8
msgid "We will show the necessary files to create a simple RPC call that adds two integers on the target VM and returns back the result to the invoking VM."
msgstr ""

#: ../../../developer/services/qrexec2.rst:218
#: b5ccbebccf9147829008ef0661c0fe0c
msgid "Client code on source VM (``/usr/bin/our_test_add_client``)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:227
#: f880e886868e4defab1d038e1bbe980e
msgid "Server code on target VM (``/usr/bin/our_test_add_server``)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:236
#: fa5c5e663a8b44feb985e2e217e78fcf
msgid "Policy file in dom0 (``/etc/qubes-rpc/policy/test.Add``)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:243
#: 359e749eacac4c8686f63640f31ca5a6
msgid "Server path definition on target VM (``/etc/qubes-rpc/test.Add``)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:251
#: b9c18ce3edf542cab8074ebe5e4adf8f
msgid "To test this service, run the following in the source VM:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:261
#: 26b97c121e81403f80af44ee9c58eb0c
msgid "and we should get “3” as answer, provided dom0 policy allows the call to pass through, which would happen after we click “Yes” in the popup that should appear after the invocation of this command. If we changed the policy from “ask” to “allow”, then no popup should be presented, and the call will always be allowed."
msgstr ""

#: ../../../developer/services/qrexec2.rst:267
#: 8296086621a64b7098ce0600a5f6bf89
msgid "**Note:** For a real world example of writing a qrexec service, see this `blog post <https://blog.invisiblethings.org/2013/02/21/converting-untrusted-pdfs-into-trusted.html>`__."
msgstr ""

#: ../../../developer/services/qrexec2.rst:271
#: 3a37a55ce2ae4f48baec307aa2ced359
msgid "More high-level RPCs?"
msgstr ""

#: ../../../developer/services/qrexec2.rst:274
#: bac4c241cdbc45459119776543e362f7
msgid "As previously noted, Qubes aims to provide mechanisms that are very simple and thus with very small attack surface. This is the reason why the inter-VM RPC framework is very primitive and doesn’t include any serialization or other function arguments passing, etc. We should remember, however, that users/app developers are always free to run more high-level RPC protocols on top of qrexec. Care should be taken, however, to consider potential attack surfaces that are exposed to untrusted or less trusted VMs in that case."
msgstr ""

#: ../../../developer/services/qrexec2.rst:284
#: 041616d5f278497da8091f8fab2f352b
msgid "Qubes RPC internals"
msgstr ""

#: ../../../developer/services/qrexec2.rst:287
#: 563d24187d1f4b20804668d8fbb93d5d
msgid "(*This is about the implementation of qrexec v2. For the implementation of qrexec v3, see* :doc:`here </developer/services/qrexec-internals>` *. Note that the user API in v3 is backward compatible: qrexec apps written for Qubes R2 should run without modification on Qubes R3.*)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:290
#: 9a822ade5839402eaf3f9c2ab6ade0a8
msgid "Dom0 tools implementation"
msgstr ""

#: ../../../developer/services/qrexec2.rst:293
#: ../../../developer/services/qrexec2.rst:312
#: 68df89b99a7d44f0b686b272c4d81fcd
#: 65efffa6fadb479cb011b003cfbaa982
msgid "Players:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:295
#: 3e23966ea24d49119d8e61bbd2e4c77d
msgid "``/usr/lib/qubes/qrexec-daemon``: started by mgmt stack (qubes.py) when a VM is started."
msgstr ""

#: ../../../developer/services/qrexec2.rst:298
#: d5f683c3132842b9bcdec2a7becb94dd
msgid "``/usr/lib/qubes/qrexec-policy``: internal program used to evaluate the policy file and making the 2nd half of the connection."
msgstr ""

#: ../../../developer/services/qrexec2.rst:301
#: db7ac6dfd92842d5ba2fa02ee07901be
msgid "``/usr/lib/qubes/qrexec-client``: raw command line tool that talks to the daemon via unix socket (``/var/run/qubes/qrexec.XID``)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:306
#: d45ab7e3f0474c4786c975fbd80a1336
msgid "**Note:** None of the above tools are designed to be used by users."
msgstr ""

#: ../../../developer/services/qrexec2.rst:309
#: 893fdbb511b3472d8011f03294948c4f
msgid "Linux VMs implementation"
msgstr ""

#: ../../../developer/services/qrexec2.rst:314
#: b4af63edbb634708ba88e1532c6248b8
msgid "``/usr/lib/qubes/qrexec-agent``: started by VM bootup scripts, a daemon."
msgstr ""

#: ../../../developer/services/qrexec2.rst:317
#: 6efbbc3812a64ef5ab729f276d4dc9d1
msgid "``/usr/lib/qubes/qubes-rpc-multiplexer``: executes the actual service program, as specified in VM’s ``/etc/qubes-rpc/qubes.XYZ``."
msgstr ""

#: ../../../developer/services/qrexec2.rst:320
#: 8252770ed7f2461097f5d82e5ae5ebc9
msgid "``/usr/lib/qubes/qrexec-client-vm``: raw command line tool that talks to the agent."
msgstr ""

#: ../../../developer/services/qrexec2.rst:325
#: ../../../developer/services/qrexec2.rst:349
#: 6b31be65d3fa48b8be274b15e5fcaa7b
#: 46bdd7b0fddc40f790118d74aad45e24
msgid "**Note:** None of the above tools are designed to be used by users. ``qrexec-client-vm`` is designed to be wrapped up by Qubes apps."
msgstr ""

#: ../../../developer/services/qrexec2.rst:329
#: 930ddace0a484ff880f7959b4d4e11a8
msgid "Windows VMs implementation"
msgstr ""

#: ../../../developer/services/qrexec2.rst:332
#: f58e44f1811b4f89b2497f27f52a4304
msgid "``%QUBES_DIR%`` is the installation path (``c:\\Program Files\\Invisible Things Lab\\Qubes OS Windows Tools`` by default)."
msgstr ""

#: ../../../developer/services/qrexec2.rst:336
#: 9b2ad03aa6ef4f21a0d9c19ded469394
msgid "``%QUBES_DIR%\\bin\\qrexec-agent.exe``: runs as a system service. Responsible both for raw command execution and interpreting RPC service requests."
msgstr ""

#: ../../../developer/services/qrexec2.rst:340
#: 3e21f2e4af124ab98fd505414f85261b
msgid "``%QUBES_DIR%\\qubes-rpc``: directory with ``qubes.XYZ`` files that contain commands for executing RPC services. Binaries for the services are contained in ``%QUBES_DIR%\\qubes-rpc-services``."
msgstr ""

#: ../../../developer/services/qrexec2.rst:344
#: 0c6d916876404a99b4d6462741a876e4
msgid "``%QUBES_DIR%\\bin\\qrexec-client-vm``: raw command line tool that talks to the agent."
msgstr ""

#: ../../../developer/services/qrexec2.rst:353
#: 0bad69cab2ca4fde9927c5ee2ce77036
msgid "All the pieces together at work"
msgstr ""

#: ../../../developer/services/qrexec2.rst:356
#: a90ab02968ec4ba88fbbf2e96cc19e94
msgid "**Note:** This section is not needed to use qrexec for writing Qubes apps. Also note the :doc:`qrexec framework implemention in Qubes R3 </developer/services/qrexec>` significantly differs from what is described in this section."
msgstr ""

#: ../../../developer/services/qrexec2.rst:360
#: 67433ac76c0c4f67886d438431f9e63e
msgid "The VM-VM channels in Qubes R2 are made via “gluing” two VM-Dom0 and Dom0-VM vchan connections:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:366
#: ../../../developer/services/qrexec2.rst:366
#: ef9dcdb1d5cb4deaa90b95b94b02894e
#: 5aa9020924e146bb8121a9aa74b3847c
msgid "qrexec2-internals.png"
msgstr ""

#: ../../../developer/services/qrexec2.rst:368
#: e006960bc7a64cd18c7bd566440ba5a4
msgid "Note that Dom0 never examines the actual data flowing in neither of the two vchan connections."
msgstr ""

#: ../../../developer/services/qrexec2.rst:371
#: 151f6cb338714cfa971755c504219565
msgid "When a user in a source VM executes ``qrexec-client-vm`` utility, the following steps are taken:"
msgstr ""

#: ../../../developer/services/qrexec2.rst:374
#: 9da81951af26460ab98618b80da8cbaa
msgid "``qrexec-client-vm`` connects to ``qrexec-agent``’s ``/var/run/qubes/qrexec-agent-fdpass`` unix socket 3 times. Reads 4 bytes from each of them, which is the fd number of the accepted socket in agent. These 3 integers, in text, concatenated, form “connection identifier” (CID)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:380
#: afb4891db3374ee6936000bb7ea8fb40
msgid "``qrexec-client-vm`` writes to ``/var/run/qubes/qrexec-agent`` fifo a blob, consisting of target vmname, rpc action, and CID"
msgstr ""

#: ../../../developer/services/qrexec2.rst:383
#: 0e9d623c25704d1a9edb0bc4d7201c99
msgid "``qrexec-client-vm`` executes the rpc client, passing the above mentioned unix sockets as process stdin/stdout, and optionally stderr (if the ``PASS_LOCAL_STDERR`` env variable is set)"
msgstr ""

#: ../../../developer/services/qrexec2.rst:387
#: 3a43d1a49d874b0eb21ae67ca7df2c9d
msgid "``qrexec-agent`` passes the blob to ``qrexec-daemon``, via ``MSG_AGENT_TO_SERVER_TRIGGER_CONNECT_EXISTING`` message over vchan"
msgstr ""

#: ../../../developer/services/qrexec2.rst:390
#: b9e5def5d5aa494985c56403ef50b11b
msgid "``qrexec-daemon`` executes ``qrexec-policy``, passing source vmname, target vmname, rpc action, and CID as cmdline arguments"
msgstr ""

#: ../../../developer/services/qrexec2.rst:393
#: 4ac2882da0f8444b80826a0cee2e5ddb
msgid "``qrexec-policy`` evaluates the policy file. If successful, creates a pair of ``qrexec-client`` processes, whose stdin/stdout are cross-connected."
msgstr ""

#: ../../../developer/services/qrexec2.rst:397
#: f033dce7704d45839ff85a596970554d
msgid "The first ``qrexec-client`` connects to the src VM, using the ``-c ClientID`` parameter, which results in not creating a new process, but connecting to the existing process file descriptors (these are the fds of unix socket created in step 1)."
msgstr ""

#: ../../../developer/services/qrexec2.rst:402
#: dcf8d9692f214b1681beb7013b734e78
msgid "The second ``qrexec-client`` connects to the target VM, and executes ``qubes-rpc-multiplexer`` command there with the rpc action as the cmdline argument. Finally, ``qubes-rpc-multiplexer`` executes the correct rpc server on the target."
msgstr ""

#: ../../../developer/services/qrexec2.rst:409
#: 63b00773bad641149fada26ac5087993
msgid "In the above step, if the target VM is ``$dispvm``, the DispVM is created via the ``qfile-daemon-dvm`` program. The latter waits for the ``qrexec-client`` process to exit, and then destroys the DispVM."
msgstr ""

#: ../../../developer/services/qrexec2.rst:415
#: 8d28c308647046c2ab652135896e5b11
msgid "*TODO: Protocol description (“wire-level” spec)*"
msgstr ""
