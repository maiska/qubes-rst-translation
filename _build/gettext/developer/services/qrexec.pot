# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 23:45+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../developer/services/qrexec.rst:3
#: 1d4b48d591514b9e95ff594431e0257e
msgid "Qrexec: secure communication across domains"
msgstr ""

#: ../../../developer/services/qrexec.rst:6
#: 8a423cf225154897aa25902df6c464c5
msgid "(*This page is about qrexec v3. For qrexec v2, see* :doc:`here </developer/services/qrexec2>` *.*)"
msgstr ""

#: ../../../developer/services/qrexec.rst:8
#: 82d9993f94e540339d7378d55c7b1f3c
msgid "The **qrexec framework** is used by core Qubes components to implement communication between domains. Qubes domains are strictly isolated by design. However, the OS needs a mechanism to allow the administrative domain (dom0) to force command execution in another domain (VM). For instance, when a user selects an application from the KDE menu, it should start in the selected VM. Also, it is often useful to be able to pass stdin/stdout/stderr from an application running in a VM to dom0 (and the other way around). (For example, so that a VM can notify dom0 that there are updates available for it). By default, Qubes allows VMs initiate such communications in specific circumstances. The qrexec framework generalizes this process by providing a remote procedure call (RPC) protocol for the Qubes architecture. It allows users and developers to use and design secure inter-VM tools."
msgstr ""

#: ../../../developer/services/qrexec.rst:23
#: 5338b7c657bc40c88bc82a13ef09aee7
msgid "Qrexec basics: architecture and examples"
msgstr ""

#: ../../../developer/services/qrexec.rst:26
#: 02c8b71cafab4ac480122b739df148f9
msgid "Qrexec is built on top of *vchan*, a Xen library providing data links between VMs. During domain startup , a process named ``qrexec-daemon`` is started in dom0, and a process named ``qrexec-agent`` is started in the VM. They are connected over a **vchan** channel. ``qrexec-daemon`` listens for connections from a dom0 utility named ``qrexec-client``. Let’s say we want to start a process (call it ``VMprocess``) in a VM (``someVM``). Typically, the first thing that a ``qrexec-client`` instance does is to send a request to the ``qrexec-daemon``, which in turn relays it to ``qrexec-agent`` running in ``someVM``. ``qrexec-daemon`` assigns unique vchan connection details and sends them to both ``qrexec-client`` (in dom0) and ``qrexec-agent`` (in ``someVM``). ``qrexec-client`` starts a vchan server, which ``qrexec-agent`` then connects to. Once this channel is established, stdin/stdout/stderr from the VMprocess is passed between ``qrexec-agent`` and the ``qrexec-client`` process."
msgstr ""

#: ../../../developer/services/qrexec.rst:45
#: ../../../developer/services/qrexec.rst:45
#: 8434fe9b758f450cb14c726501d24b86
#: da4871a617864f849eb8c6f0f5ee1736
msgid "qrexec basics diagram"
msgstr ""

#: ../../../developer/services/qrexec.rst:47
#: 7dfea36ecc9a46a29f16735778dc9ab4
msgid "The ``qrexec-client`` command is used to make connections to VMs from dom0. For example, the following command creates an empty file called ``hello-world.txt`` in the home folder of ``someVM``:"
msgstr ""

#: ../../../developer/services/qrexec.rst:57
#: 4b3945a717714a46a020a176e21521cc
msgid "The string before the colon specifies what user to run the command as. The ``-e`` flag tells ``qrexec-client`` to exit immediately after sending the execution request and receiving a status code from ``qrexec-agent`` (whether the process creation succeeded). With this option, no further data is passed between the domains. By contrast, the following command demonstrates an open channel between dom0 and someVM (in this case, a remote shell):"
msgstr ""

#: ../../../developer/services/qrexec.rst:71
#: a63c2fd7648d47d2a839f48c35aaf993
msgid "The ``qvm-run`` command is heavily based on ``qrexec-client``. It also takes care of additional activities, e.g. starting the domain if it is not up yet and starting the GUI daemon. Thus, it is usually more convenient to use ``qvm-run``."
msgstr ""

#: ../../../developer/services/qrexec.rst:76
#: 85213a74fb3a46dd9b2a029a45751ae0
msgid "There can be an almost arbitrary number of ``qrexec-client`` processes for a given domain. The limiting factor is the number of available vchan channels, which depends on the underlying hypervisor, as well the domain’s OS."
msgstr ""

#: ../../../developer/services/qrexec.rst:81
#: b8859cb62f97457aa1d8689c7e308442
msgid "For more details on the qrexec framework and protocol, see “:doc:`Qubes RPC internals </developer/services/qrexec-internals>`.”"
msgstr ""

#: ../../../developer/services/qrexec.rst:84
#: be12859f75d94005ba363fd2565ad08e
msgid "Qubes RPC services"
msgstr ""

#: ../../../developer/services/qrexec.rst:87
#: 60cb5fc4fc7341fabf3a8154f5899a88
msgid "Some common tasks (like copying files between VMs) have an RPC-like structure: a process in one VM (say, the file sender) needs to invoke and send/receive data to some process in other VM (say, the file receiver). The Qubes RPC framework was created to securely facilitate a range of such actions."
msgstr ""

#: ../../../developer/services/qrexec.rst:93
#: 9c62fe283fb64ddcb20ce0a491286042
msgid "Obviously, inter-VM communication must be tightly controlled to prevent one VM from taking control of another, possibly more privileged, VM. Therefore the design decision was made to pass all control communication via dom0, that can enforce proper authorization. Then, it is natural to reuse the already-existing qrexec framework."
msgstr ""

#: ../../../developer/services/qrexec.rst:99
#: d05ca45f854c4d3fa8af0d117db3f2a7
msgid "Also, note that bare qrexec provides ``VM <-> dom0`` connectivity, but the command execution is always initiated by dom0. There are cases when VM needs to invoke and send data to a command in dom0 (e.g. to pass information on newly installed ``.desktop`` files). Thus, the framework allows dom0 to be the RPC target as well."
msgstr ""

#: ../../../developer/services/qrexec.rst:105
#: 083c48ab35254759ab68ed6d792f522b
msgid "Thanks to the framework, RPC programs are very simple – both RPC client and server just use their stdin/stdout to pass data. The framework does all the inner work to connect these processes to each other via ``qrexec-daemon`` and ``qrexec-agent``. Additionally, disposable VMs are tightly integrated – RPC to a DisposableVM is identical to RPC to a normal domain, all one needs is to pass ``@dispvm`` as the remote domain name."
msgstr ""

#: ../../../developer/services/qrexec.rst:114
#: f4ff9c172d6942b4b3ae3abcb26b6f84
msgid "Qubes RPC administration"
msgstr ""

#: ../../../developer/services/qrexec.rst:118
#: 46bbd4d47faa44c4923de344f63c6824
msgid "Policy files"
msgstr ""

#: ../../../developer/services/qrexec.rst:121
#: 60a98f59924f4e95aa28de561e2814f4
msgid "The dom0 directory ``/etc/qubes-rpc/policy/`` contains a file for each available RPC action that a VM might call. Together the contents of these files make up the RPC access policy database. Policies are defined in lines with the following format:"
msgstr ""

#: ../../../developer/services/qrexec.rst:132
#: a0f9f015e67b4578b30091e739f05a85
msgid "You can specify srcvm and destvm by name or by one of the reserved keywords such as ``@anyvm``, ``@dispvm``, or ``dom0``. (Of these three, only ``@anyvm`` keyword makes sense in the srcvm field. Service calls from dom0 are currently always allowed, and ``@dispvm`` means “new VM created for this particular request,” so it is never a source of request.) Other methods using *tags* and *types* are also available (and discussed below)."
msgstr ""

#: ../../../developer/services/qrexec.rst:140
#: 4c5ff598e8904b87bdf479cca858cd23
msgid "Whenever a RPC request for an action is received, the domain checks the first matching line of the relevant file in ``/etc/qubes-rpc/policy/`` to determine access: whether to allow the request, what VM to redirect the execution to, and what user account the program should run under. Note that if the request is redirected (``target=`` parameter), policy action remains the same – even if there is another rule which would otherwise deny such request. If no policy rule is matched, the action is denied. If the policy file does not exist, the user is prompted to create one. If there is still no policy file after prompting, the action is denied."
msgstr ""

#: ../../../developer/services/qrexec.rst:151
#: e54a937e48b344e7b9540fc48a31a8fd
msgid "In the target VM, a file in either of the following locations must exist, containing the file name of the program that will be invoked, or being that program itself – in which case it must have executable permission set (``chmod +x``): - ``/etc/qubes-rpc/RPC_ACTION_NAME`` when you make it in the template qube; - ``/usr/local/etc/qubes-rpc/RPC_ACTION_NAME`` for making it only in an app qube."
msgstr ""

#: ../../../developer/services/qrexec.rst:160
#: f5c132d3942340a192cfac515333d15b
msgid "Making an RPC call"
msgstr ""

#: ../../../developer/services/qrexec.rst:163
#: ee6f29b13b914355bba002cb0bfb7d32
msgid "From outside of dom0, RPC calls take the following form:"
msgstr ""

#: ../../../developer/services/qrexec.rst:171
#: be23d81b7909409e82ebc3fbe3d748ff
msgid "For example:"
msgstr ""

#: ../../../developer/services/qrexec.rst:179
#: c4085009d7ac43918335fba0eefe64ce
msgid "Note that only stdin/stdout is passed between RPC server and client – notably, no command line arguments are passed. By default, stderr of client and server is logged in the syslog/journald of the VM where the process is running."
msgstr ""

#: ../../../developer/services/qrexec.rst:184
#: 1c1576fa265146698262168344c490f0
msgid "It is also possible to call service without specific client program – in which case server stdin/out will be connected with the terminal:"
msgstr ""

#: ../../../developer/services/qrexec.rst:194
#: d8f7f3c9e3cb4f9f9a6b0ec7a11e03fa
msgid "Specifying VMs: tags, types, targets, etc."
msgstr ""

#: ../../../developer/services/qrexec.rst:197
#: cae8f93f5d0a4a5d94320139b28daf0b
msgid "There are severals methods for specifying source/target VMs in RPC policies."
msgstr ""

#: ../../../developer/services/qrexec.rst:200
#: 2b487b4b5eb84ddc915a3cccbbce661e
msgid "``@tag:some-tag`` - meaning a VM with tag ``some-tag``"
msgstr ""

#: ../../../developer/services/qrexec.rst:202
#: ab8e4ae6e90c4c428fe896f734f9a5a4
msgid "``@type:type`` - meaning a VM of ``type`` (like ``AppVM``, ``TemplateVM`` etc)"
msgstr ""

#: ../../../developer/services/qrexec.rst:207
#: fb573c6444dc4d72af647e264755a033
msgid "Target VM can be also specified as ``@default``, which matches the case when calling VM didn’t specified any particular target (either by using ``@default`` target, or empty target). For DisposableVMs, ``@dispvm:DISP_VM`` is very similar to ``@dispvm`` but forces using a particular VM (``DISP_VM``) as a base VM to be started as DisposableVM. For example:"
msgstr ""

#: ../../../developer/services/qrexec.rst:220
#: 8f0103cb58594b109e572827341ee5ad
msgid "Adding such policy itself will not force usage of this particular ``DISP_VM`` - it will only allow it when specified by the caller. But ``@dispvm:DISP_VM`` can also be used as target in request redirection, so *it is possible* to force particular ``DISP_VM`` usage, when caller didn’t specify it:"
msgstr ""

#: ../../../developer/services/qrexec.rst:232
#: 695cf83a45d24d6fa5495a7824c521cf
msgid "Note that without redirection, this rule would allow using default Disposable VM (``default_dispvm`` VM property, which itself defaults to global ``default_dispvm`` property). Also note that the request will be allowed (``allow`` action) even if there is no second rule allowing calls to ``@dispvm:anon-whonix-dvm``, or even if there is a rule explicitly denying it. This is because the redirection happens *after* considering the action."
msgstr ""

#: ../../../developer/services/qrexec.rst:240
#: 32541dc89550415facbf28c3505a0c7b
msgid "The policy confirmation dialog (``ask`` action) allows the user to specify target VM. User can choose from VMs that, according to policy, would lead to ``ask`` or ``allow`` actions. It is not possible to select VM that policy would deny. By default no VM is selected, even if the caller provided some, but policy can specify default value using ``default_target=`` parameter. For example:"
msgstr ""

#: ../../../developer/services/qrexec.rst:255
#: 98796d28ebce45418c5a983cdbde51db
msgid "The first rule allow call from ``work-mail`` to ``work-archive``, without any confirmation. The second rule will ask the user about calls from ``work-mail`` VM to any VM with tag ``work``. And the confirmation dialog will have ``work-files`` VM chosen by default, regardless of the VM specified by the caller (``work-mail`` VM). The third rule allow the caller to not specify target VM at all and let the user choose, still - from VMs with tag ``work`` (and ``work-archive``, regardless of tag), and with ``work-files`` as default."
msgstr ""

#: ../../../developer/services/qrexec.rst:265
#: 6f044f1eb435472682a08395bc7df894
msgid "RPC services and security"
msgstr ""

#: ../../../developer/services/qrexec.rst:268
#: 9a3505508c3748a2af8aa64b63171d34
msgid "Be very careful when coding and adding a new RPC service. Unless the offered functionality equals full control over the target (it is the case with e.g. ``qubes.VMShell`` action), any vulnerability in an RPC server can be fatal to Qubes security. On the other hand, this mechanism allows to delegate processing of untrusted input to less privileged (or disposable) AppVMs, thus wise usage of it increases security."
msgstr ""

#: ../../../developer/services/qrexec.rst:275
#: fc0e115f86774934a21a6d261a518a41
msgid "For example, this command will run the ``firefox`` command in a DisposableVM based on ``work``:"
msgstr ""

#: ../../../developer/services/qrexec.rst:284
#: a33dd029ff2c4ea3b7519bc086b2058e
msgid "By contrast, consider this command:"
msgstr ""

#: ../../../developer/services/qrexec.rst:292
#: 9b907666f165453c9a6a08d02eb4389c
msgid "This will look for a ``firefox.desktop`` file in a standard location in a DisposableVM based on ``work``, then launch the application described by that file. The practical difference is that the bare ``qvm-run`` command uses the ``qubes.VMShell`` service, which allows you to run an arbitrary command with arbitrary arguments, essentially providing full control over the target VM. By contrast, the ``qubes.StartApp`` service allows you to run only applications that are advertised in ``/usr/share/applications`` (or other standard locations) *without* control over the arguments, so giving a VM access to ``qubes.StartApp`` is much safer. While there isn’t much practical difference between the two commands above when starting an application from dom0 in Qubes 4.0, there is a significant security risk when launching applications from a domU (e.g., from a separate GUI domain). This is why ``qubes.StartApp`` uses our standard ``qrexec`` argument grammar to strictly filter the permissible grammar of the ``Exec=`` lines in ``.desktop`` files that are passed from untrusted domUs to dom0, thereby protecting dom0 from command injection by maliciously-crafted ``.desktop`` files."
msgstr ""

#: ../../../developer/services/qrexec.rst:311
#: 3e81806ff29b4028b4927d0aca099200
msgid "Service policies with arguments"
msgstr ""

#: ../../../developer/services/qrexec.rst:314
#: 069ecb5f12cf4046833c2acead90fc81
msgid "Sometimes a service name alone isn’t enough to make reasonable qrexec policy. One example of such a situation is :doc:`qrexec-based USB passthrough </user/how-to-guides/how-to-use-usb-devices>`. Using just a service name would make it difficult to express the policy “allow access to devices X and Y, but deny to all others.” It isn’t feasible to create a separate service for every device: we would need to change the code in multiple files any time we wanted to update the service."
msgstr ""

#: ../../../developer/services/qrexec.rst:321
#: c01e612c365549b8bf56d827a205eb90
msgid "For this reason it is possible to specify a service argument, which will be subject to a policy. A service argument can make service policies more fine-grained. With arguments, it is easier to write more precise policies using the “allow” and “deny” actions, instead of relying on the “ask” method. (Writing too many “ask” policies offloads additional decisions to the user. Generally, the fewer choices the user must make, the lower the chance to make a mistake.)"
msgstr ""

#: ../../../developer/services/qrexec.rst:329
#: c25764febc574eaebe5c54537e50e334
msgid "Each specific argument that we want to use needs its own policy in dom0 at a path like ``/etc/qubes-rpc/policy/RPC_ACTION_NAME+ARGUMENT``. So for instance, we might have policies called ``test.Device``, ``test.Device+device1`` and ``test.Device+device2``. If the policy for the specific argument is not set (that is, if no file exists for ``RPC_ACTION_NAME+ARGUMENT``), then dom0 uses the default policy with no argument for this service."
msgstr ""

#: ../../../developer/services/qrexec.rst:337
#: 406a380cea0649c18a58cfc36ed0b763
msgid "When calling a service that takes an argument, just add the argument to the service name separated with ``+``."
msgstr ""

#: ../../../developer/services/qrexec.rst:346
#: a57314449207458ebd29c9170a52ff66
msgid "The script will receive ``ARGUMENT`` as its argument. The argument will also become available as the ``QREXEC_SERVICE_ARGUMENT`` environment variable. This means it is possible to install a different script for a particular service argument."
msgstr ""

#: ../../../developer/services/qrexec.rst:351
#: 7e8608776ea04b8eb83a1d607c6cedad
msgid "See `below <#rpc-service-with-argument-file-reader>`__ for an example of an RPC service using an argument."
msgstr ""

#: ../../../developer/services/qrexec.rst:353
#: 5fe3101f0e564f2a9331cf85f1ed06ac
msgid "<!-- TODO document \"Yes to All\" authorization if it is reintroduced -->"
msgstr ""

#: ../../../developer/services/qrexec.rst:356
#: a7ca76a65fe94f53abf601f5f7f47ad4
msgid "Qubes RPC examples"
msgstr ""

#: ../../../developer/services/qrexec.rst:359
#: 31fa1b6538f04a70872f103f4d3898c8
msgid "To demonstrate some of the possibilities afforded by the qrexec framework, here are two examples of custom RPC services."
msgstr ""

#: ../../../developer/services/qrexec.rst:363
#: 52b11954ec864f93bff907efb2d76574
msgid "Simple RPC service (addition)"
msgstr ""

#: ../../../developer/services/qrexec.rst:366
#: 7357cfb7f6924ba0bda03ff7e78032db
msgid "We can create an RPC service that adds two integers in a target domain (the server, call it “anotherVM”) and returns back the result to the invoker (the client, “someVM”). In someVM, create a file with the following contents and save it with the path ``/usr/bin/our_test_add_client``:"
msgstr ""

#: ../../../developer/services/qrexec.rst:380
#: 1a00a3f1efa243a3888fb64ab4225d3f
msgid "Our server will be anotherVM at ``/usr/bin/our_test_add_server``. The code for this file is:"
msgstr ""

#: ../../../developer/services/qrexec.rst:391
#: a245db8eb4e94b2db4a4b8e2bd9180e6
msgid "We’ll need to create a service called ``test.Add`` with its own definition and policy file in dom0. Now we need to define what the service does. In this case, it should call our addition script. We define the service with a symlink at ``/etc/qubes-rpc/test.Add`` pointing to our server script (the script can be also placed directly in ``/etc/qubes-rpc/test.Add`` - make sure the file has executable bit set!):"
msgstr ""

#: ../../../developer/services/qrexec.rst:405
#: 1ebc4abbb65d4714bf2a55fc7fd71ec0
msgid "The administrative domain will direct traffic based on the current RPC policies. In dom0, create a file at ``/etc/qubes-rpc/policy/test.Add`` containing the following:"
msgstr ""

#: ../../../developer/services/qrexec.rst:415
#: be62a91af476435f84be84f3b6eda22c
msgid "This will allow our client and server to communicate."
msgstr ""

#: ../../../developer/services/qrexec.rst:417
#: 45e194080d144456a829b4743e1fee4f
msgid "Before we make the call, ensure that the client and server scripts have executable permissions. Finally, invoke the RPC service."
msgstr ""

#: ../../../developer/services/qrexec.rst:426
#: c6cfe5004aea48de96cfcf19cf8ef037
msgid "We should get “3” as answer. (dom0 will ask for confirmation first.)"
msgstr ""

#: ../../../developer/services/qrexec.rst:428
#: fe697db292294ce293fe0af807ca0b83
msgid "**Note:** For a real world example of writing a qrexec service, see this `blog post <https://blog.invisiblethings.org/2013/02/21/converting-untrusted-pdfs-into-trusted.html>`__."
msgstr ""

#: ../../../developer/services/qrexec.rst:432
#: 1800b016af51441d909900bbfcd8f309
msgid "RPC service with argument (file reader)"
msgstr ""

#: ../../../developer/services/qrexec.rst:435
#: 071c5f9b7849498a9a0d70fa9491ad4f
msgid "Here we create an RPC call that reads a specific file from a predefined directory on the target. This example uses an `argument <#service-policies-with-arguments>`__ to the policy. In this example a simplified workflow will be used. The service code is placed directly in the service definition file on the target VM. No separate client script will be needed."
msgstr ""

#: ../../../developer/services/qrexec.rst:442
#: fb331b8d318245f8be00dba7e0dfce90
msgid "First, on your target VM, create two files in the home directory: ``testfile1`` and ``testfile2``. Have them contain two different “Hello world!” lines."
msgstr ""

#: ../../../developer/services/qrexec.rst:446
#: 0699ecc6aa724f67a8d92369efdfd115
msgid "Next, we define the RPC service. On the target VM, place the code below at ``/etc/qubes-rpc/test.File``:"
msgstr ""

#: ../../../developer/services/qrexec.rst:461
#: 803ec4b4beb44ea49a394fb4916f540c
msgid "Make sure the file is executable! (The service argument is already sanitized by qrexec framework. It is guaranteed to not contain any spaces or slashes, so there should be no need for additional path sanitization.)"
msgstr ""

#: ../../../developer/services/qrexec.rst:466
#: 18b9edb4e482458aa801690ceb6827b8
msgid "Now we create three policy files in dom0. See the table below for details. Replace “source_vm1” and others with the names of your own chosen domains."
msgstr ""

#: ../../../developer/services/qrexec.rst:475
#: 21a230a1f8b4483591f938f79399299e
msgid "Path to file in dom0"
msgstr ""

#: ../../../developer/services/qrexec.rst:476
#: 3c9d9a30dd6447b2aa1e424c898d5c9f
msgid "Policy contents"
msgstr ""

#: ../../../developer/services/qrexec.rst:477
#: 61a15996efb44925abb0a874835ed3cc
msgid "/etc/qubes-rpc/policy/test.File"
msgstr ""

#: ../../../developer/services/qrexec.rst:478
#: 1ddd2620c2e045d387d2372b420f7dce
msgid "@anyvm @anyvm deny"
msgstr ""

#: ../../../developer/services/qrexec.rst:479
#: ae5d63251f574562adaf8a00f6bbc62b
msgid "/etc/qubes-rpc/policy/test.File+testfile1"
msgstr ""

#: ../../../developer/services/qrexec.rst:480
#: da508b01cc42454ead8327b0f5606808
msgid "source_vm1 target_vm allow"
msgstr ""

#: ../../../developer/services/qrexec.rst:481
#: b4507860e0ed4a58aedcd118fda749e7
msgid "/etc/qubes-rpc/policy/test.File+testfile2"
msgstr ""

#: ../../../developer/services/qrexec.rst:482
#: e0a10ce99fce496f9b5897419be64274
msgid "source_vm2 target_vm allow"
msgstr ""

#: ../../../developer/services/qrexec.rst:485
#: 892e25031d3a4327b23e137bce491b7b
msgid "With this done, we can run some tests. Invoke RPC from ``source_vm1`` via"
msgstr ""

#: ../../../developer/services/qrexec.rst:494
#: cb41212b22a1491fa4d8ad4e5f0bdaed
msgid "We should get the contents of ``/home/user/testfile1`` printed to the terminal. Invoking the service from ``source_vm2`` should work the same, and ``testfile2`` should also work."
msgstr ""

#: ../../../developer/services/qrexec.rst:505
#: 6eae17fb308840c9b570aac4b2dced5b
msgid "But when invoked with other arguments or from a different VM, it should be denied."
msgstr ""
