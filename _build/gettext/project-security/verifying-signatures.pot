# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 23:45+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../project-security/verifying-signatures.rst:3
#: 114f0e0848404978994c7d85b6ef8ba6
msgid "Verifying signatures"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:6
#: 904ba07b497a4a48ac18f7940d8c40db
msgid "The Qubes OS Project uses `digital signatures <https://en.wikipedia.org/wiki/Digital_signature>`__ to guarantee the authenticity and integrity of certain important assets. This page explains how to verify those signatures. It is extremely important for your security to understand and apply these practices."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:12
#: 6e97f9eaa9fb4560a8be98cf6defcbd3
msgid "What digital signatures can and cannot prove"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:15
#: 2b1d77b64f2a457c9bc5b2fd74048ff6
msgid "Most people — even programmers — are confused about the basic concepts underlying digital signatures. Therefore, most people should read this section, even if it looks trivial at first sight."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:19
#: c2e9f9864b4e4832805ed7b5abf0deb7
msgid "Digital signatures can prove both **authenticity** and **integrity** to a reasonable degree of certainty. **Authenticity** ensures that a given file was indeed created by the person who signed it (i.e., that a third party did not forge it). **Integrity** ensures that the contents of the file have not been tampered with (i.e., that a third party has not undetectably altered its contents *en route*)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:26
#: 8bd09b0494394857bf4b9645f4109d65
msgid "Digital signatures **cannot** prove, e.g., that the signed file is not malicious. In fact, there is nothing that could stop someone from signing a malicious program (and it happens from time to time in reality)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:31
#: a73b5efe1f0d42bf98a5a1a2226c2eeb
msgid "The point is that we must decide who we will trust (e.g., Linus Torvalds, Microsoft, or the Qubes Project) and assume that if a trusted party signed a given file, then it should not be malicious or negligently buggy. The decision of whether to trust any given party is beyond the scope of digital signatures. It’s more of a social and political decision."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:38
#: d0f88d437d3f4f61b6579fd4be332c4e
msgid "Once we decide to trust certain parties, digital signatures are useful, because they make it possible for us to limit our trust only to those few parties we choose and not to worry about all the bad things that can happen between them and us, e.g., server compromises (qubes-os.org will surely be compromised one day, so :ref:`don’t blindly trust the live version of this site <introduction/faq:should i trust this website?>`), dishonest IT staff at the hosting company, dishonest staff at the ISPs, Wi-Fi attacks, etc. We call this philosophy :ref:`distrusting the infrastructure <introduction/faq:what does it mean to \"distrust the infrastructure\"?>`."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:46
#: 8f0b0eb7d57049f9b169bfa80fee56a0
msgid "By verifying all the files we download that purport to be authored by a party we’ve chosen to trust, we eliminate concerns about the bad things discussed above, since we can easily detect whether any files have been tampered with (and subsequently choose to refrain from executing, installing, or opening them)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:52
#: 3cb9651ed21941f990b8e5b1685fb2e9
msgid "However, for digital signatures to make sense, we must ensure that the public keys we use for signature verification are the original ones. Anybody can generate a cryptographic key that purports to belong to “The Qubes OS Project,” but of course only the keys that we (the real Qubes developers) generate are the genuine ones. The rest of this page explains how to verify the authenticity of the various keys used in the project and how to use those keys to verify certain important assets."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:61
#: f0ce3ac210f64ec59b77076acd9a58ea
msgid "OpenPGP software"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:64
#: a77361d747254c8db253258bd5b9aa43
msgid "We use `PGP <https://en.wikipedia.org/wiki/Pretty_Good_Privacy>`__ (specifically, the `OpenPGP <https://en.wikipedia.org/wiki/Pretty_Good_Privacy#OpenPGP>`__ standard). Before we begin, you’ll need software that can manage PGP keys and verify PGP signatures. Any program that complies with the OpenPGP standard will do, but here are some examples for popular operating systems:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:72
#: 36f8446b0301458e8ddc3357d89617d2
msgid "**Linux:** `GnuPG <https://gnupg.org/download/index.html>`__ (`documentation <https://www.gnupg.org/documentation/>`__). Open a terminal and use the ``gpg2`` command. If you don’t already have GnuPG installed, install it via your distro’s package manager or from the GnuPG website."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:78
#: b903512bac9640678e1f7e0383dff0f1
msgid "**Mac:** `GPG Suite <https://gpgtools.org/>`__ (`documentation <https://gpgtools.tenderapp.com/kb>`__). Open a terminal to enter commands."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:82
#: 6fdc0bd0c65b4fe3b8e3d2caac9aedec
msgid "**Windows:** `Gpg4win <https://gpg4win.org/download.html>`__ (`documentation <https://www.gpg4win.org/documentation.html>`__). Use the Windows command line (``cmd.exe``) to enter commands."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:86
#: e1c1c48335c541c495680fc54eca2833
msgid "Throughout this page, we’ll use GnuPG via the ``gpg2`` command. If that doesn’t work for you, try ``gpg`` instead. If that still doesn’t work, please consult the documentation for your specific program (see links above) and the `troubleshooting FAQ <#troubleshooting-faq>`__ below."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:92
#: f3a952f2ab4845a6b146711aa1f786e3
msgid "How to import and authenticate the Qubes Master Signing Key"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:95
#: c4e7aac37ad743fba6b58fbbbc84e09a
msgid "Many important Qubes OS Project assets (e.g., ISOs, RPMs, TGZs, and Git objects) are digitally signed by an official team member’s key or by a release signing key (RSK). Each such key is, in turn, signed by the `Qubes Master Signing Key (QMSK) <https://keys.qubes-os.org/keys/qubes-master-signing-key.asc>`__ (``0x427F11FD0FAA4B080123F01CDDFA1A3E36879494``). In this way, the QMSK is the ultimate root of trust for the Qubes OS Project."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:102
#: 81c338b51540436f87413c4a784a850a
msgid "The developer signing keys are set to expire after one year, while the QMSK and RSKs have no expiration date. The QMSK was generated on and is kept only on a dedicated, air-gapped “vault” machine, and the private portion will (hopefully) never leave this isolated machine."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:107
#: 96413c20c6a84edab1988834df6cd67f
msgid "Before we proceed, you must first complete the prerequisite step of `installing OpenPGP software <#openpgp-software>`__."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:110
#: 7351bbecb3cb43fb8818c8452081f201
msgid "Once you have appropriate OpenPGP software installed, there are several ways to get the QMSK."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:113
#: 389260d73c25443ab9f3fff77fd21ae2
msgid "If you’re on Qubes OS, it’s available in every qube (`except dom0 <https://github.com/QubesOS/qubes-issues/issues/2544>`__):"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:120
#: 32c773eadebf4777b94f91505cde0899
msgid "If you’re on Fedora, you can get it in the `distribution-gpg-keys <https://github.com/xsuchy/distribution-gpg-keys>`__ package:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:130
#: 7d06b7df3c494e488d465802b6f264b7
msgid "If you’re on Debian, it may already be included in your keyring."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:132
#: ../../../project-security/verifying-signatures.rst:347
#: a11d7bb5e9d24afca7ddfb3223aca9b8
#: 21e2a2ac73e949bab64f8479b653b09e
msgid "Fetch it with GPG:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:139
#: 16b902a096294e6493a73034dca1a080
msgid "Get it from a public `keyserver <https://en.wikipedia.org/wiki/Key_server_%28cryptographic%29#Keyserver_examples>`__ (specified on first use with ``--keyserver <URI>`` along with keyserver options to include key signatures), e.g.:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:149
#: 8061e5eeb7f845a39e92e60ff4b6e87e
msgid "Download it as a file, then import the file. Here are some example download locations:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:152
#: 432bcc5ebd6f4cc0879877a3dd0709a3
msgid ":doc:`Qubes security pack </project-security/security-pack>`"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:154
#: 52b4db33b8d64dbcb82c166ec270baed
msgid "`Qubes keyserver <https://keys.qubes-os.org/keys/qubes-master-signing-key.asc>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:156
#: 0fad8160cfed4be1af87928faf59f0ac
msgid "`Email to qubes-devel <https://groups.google.com/d/msg/qubes-devel/RqR9WPxICwg/kaQwknZPDHkJ>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:158
#: ce6d8de0a063413b94d93aa9d51dc6b4
msgid "`Email to qubes-users <https://groups.google.com/d/msg/qubes-users/CLnB5uFu_YQ/ZjObBpz0S9UJ>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:161
#: 37a41fc4565d403a940dfb99e7c5fa74
msgid "Once you have the key as a file, import it:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:170
#: c3666c3e56b2439585a7e6e8e6084772
msgid "Once you’ve obtained the QMSK, you must verify that it’s authentic rather than a forgery. Anyone can create a PGP key with the name “Qubes Master Signing Key” and the short key ID ``0x36879494``, so you cannot rely on these alone. You also should not rely on any single website, not even over HTTPS."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:176
#: 74f869839da24b0d827ab586fc564912
msgid "So, what *should* you do? One option is to use the PGP `Web of Trust <https://en.wikipedia.org/wiki/Web_of_trust>`__. In addition, some operating systems include the means to acquire the QMSK securely. For example, on Fedora, ``dnf install distribution-gpg-keys`` will get you the QMSK along with several other Qubes keys. On Debian, your keyring may already contain the necessary keys."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:182
#: 6c143c38867d46149273b8000ebb7911
msgid "Perhaps the most common route is to rely on the key’s fingerprint. Every PGP key has a fingerprint that uniquely identifies it among all PGP keys (viewable with ``gpg2 --fingerprint <KEY_ID>``). Therefore, if you know the genuine QMSK fingerprint, then you always have an easy way to confirm whether any purported copy of it is authentic, simply by comparing the fingerprints."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:189
#: 517f02757400404a9b1e83a056fd0938
msgid "For example, here is the QMSK fingerprint:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:198
#: eabeb3e0e3064e27a77116f4ce9d9e8e
msgid "But how do you know that this is the real fingerprint? After all, :ref:`this website could be compromised <introduction/faq:should i trust this website?>`, so the fingerprint you see here may not be genuine. That’s why we strongly suggest obtaining the fingerprint from *multiple independent sources in several different ways*."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:202
#: dd87a8f9c92e46d3ad987e90eae9c618
msgid "Here are some ideas for how to do that:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:204
#: 5ad0d0518d81428499be7544e223a632
msgid "Check the fingerprint on various websites (e.g., `mailing lists <https://groups.google.com/g/qubes-devel/c/RqR9WPxICwg/m/kaQwknZPDHkJ>`__, `discussion forums <https://forum.qubes-os.org/t/1441/9>`__, `social <https://twitter.com/rootkovska/status/496976187491876864>`__ `media <https://www.reddit.com/r/Qubes/comments/5bme9n/fingerprint_verification/>`__, `personal websites <https://andrewdavidwong.com/fingerprints.txt>`__)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:210
#: 66823563acab4a9fa7112c8fca82822e
msgid "Check against PDFs, photographs, and videos in which the fingerprint appears (e.g., `slides from a talk <https://hyperelliptic.org/PSC/slides/psc2015_qubesos.pdf>`__, on a `T-shirt <https://twitter.com/legind/status/813847907858337793/photo/2>`__, or in the `recording of a presentation <https://youtu.be/S0TVw7U3MkE?t=2563>`__)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:216
#: 4878f70fa8ff4c12bf4ec4e25366657a
msgid "Download old Qubes ISOs from different sources and check the included Qubes Master Signing Key."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:219
#: 145e7aaea090459e84d2b1657e80f9f9
msgid "Ask people to post the fingerprint on various mailing lists, forums, and chat rooms."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:222
#: dc48d6292e144fba8c9b30912a098c48
msgid "Repeat the above over Tor."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:224
#: a7b937f172114962b80d36e4977e0d53
msgid "Repeat the above over various VPNs and proxy servers."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:226
#: e1b13a17bb9a4858abf5814e6a9599f1
msgid "Repeat the above on different networks (work, school, internet cafe, etc.)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:229
#: 84679a1207804e0fb80de6bc7795276b
msgid "Text, email, call, video chat, snail mail, or meet up with people you know to confirm the fingerprint."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:232
#: fa19c160cc6e450b9bbe23b336a51903
msgid "Repeat the above from different computers and devices."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:236
#: 3aa1d23e0a044af986afada0f974d815
msgid "Once you’ve obtained the fingerprint from enough independent sources in enough different ways that you feel confident that you know the genuine fingerprint, keep it in a safe place. Every time you need to check whether a key claiming to be the QMSK is authentic, compare that key’s fingerprint to your trusted copy and confirm they match."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:242
#: e876bab07e9d4d6880385f045af7a892
msgid "Now that you’ve imported the authentic QMSK, set its trust level to “ultimate” so that it can be used to automatically verify all the keys signed by the QMSK (in particular, RSKs)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:288
#: b4e7e7ddd0524af5b7c6ebdef28bb88c
msgid "Now, when you import any of the release signing keys and many Qubes team member keys, they will already be trusted in virtue of being signed by the QMSK."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:292
#: 8a02516eff384b22870b92b2605057d0
msgid "As a final sanity check, make sure the QMSK is in your keyring with the correct trust level."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:304
#: e5aec0e0377141e798cb0e0dc4b78c1b
msgid "If you don’t see the QMSK here with a trust level of “ultimate,” go back and follow the instructions in this section carefully and consult the `troubleshooting FAQ <#troubleshooting-faq>`__ below."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:309
#: 8ede84d932ea42a8a4eb9c9cb21627f5
msgid "How to import and authenticate release signing keys"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:312
#: 2afc1e1aa31643b7a95d4da8367fc233
msgid "Every Qubes OS release is signed by a **release signing key (RSK)**, which is, in turn, signed by the Qubes Master Signing Key (QMSK)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:315
#: ../../../project-security/verifying-signatures.rst:426
#: ../../../project-security/verifying-signatures.rst:575
#: ../../../project-security/verifying-signatures.rst:759
#: 42635f1b602b4772a4cfab526b4b5b76
#: 11ad146e8959403eb4979735161c7c8a
#: 3c134c2a5ec24f168071463db00334a1
#: 418332f3eed44e708c9120420b2cf210
msgid "Before we proceed, you must first complete the following prerequisite steps:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:318
#: ../../../project-security/verifying-signatures.rst:429
#: ../../../project-security/verifying-signatures.rst:578
#: ../../../project-security/verifying-signatures.rst:762
#: 5fbb7f603ee946938ee43ed3ea818283
#: 853d302f69f14d5083efa08f33531f47
#: d1817d813929418480304e862851696c
#: 883fdb106bce44439131e0b3e3d353d3
msgid "`Install OpenPGP software. <#openpgp-software>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:320
#: 754b64e1ae6541aaa3fb2ea99a179f2f
msgid "`Import and authenticate the QMSK. <#how-to-import-and-authenticate-the-qubes-master-signing-key>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:324
#: 836b30e45f5649d1a8eef8653899b3a8
msgid "After you have completed these two prerequisite steps, the next step is to obtain the correct RSK. The filename of the RSK for your Qubes OS release is usually ``qubes-release-X-signing-key.asc``, where ``X`` is the `major version number <https://semver.org/>`__ of your Qubes release. For example, if you were installing release ``1.2.3``, you would replace ``X`` with ``1``, resulting in ``qubes-release-1-signing-key.asc``. There are several ways to get the RSK for your Qubes release."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:333
#: 2d5f49274b13439d8703c0e8f3b061e7
msgid "If you have access to an existing Qubes installation, the release keys are available in dom0 in ``/etc/pki/rpm-gpg/RPM-GPG-KEY-qubes-*``. These can be :ref:`copied <user/how-to-guides/how-to-copy-from-dom0:copying **from** dom0>` into other qubes for further use. In addition, every other qube contains the release key corresponding to that installation’s release in ``/etc/pki/rpm-gpg/RPM-GPG-KEY-qubes-*``. If you wish to use one of these keys, make sure to import it into your keyring, e.g.:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:354
#: 34df4b6d1deb4553a96ac7e73a623c6e
msgid "Download it as a file. You can find the RSK for your Qubes release on the :doc:`downloads </user/downloading-installing-upgrading/downloads>` page. You can also download all the currently used developers’ signing keys, RSKs, and the Qubes Master Signing Key from the :doc:`Qubes security pack </project-security/security-pack>` and the `Qubes keyserver <https://keys.qubes-os.org/keys/>`__. Once you’ve downloaded your RSK, import it with GPG:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:368
#: e13d362e2788434db4b2843ffc3c726b
msgid "Now that you have the correct RSK, you simply need to verify that it is signed by the QMSK:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:383
#: e4aba621e74f4d40b40f320abfd4b4fb
msgid "This is just an example, so the output you receive may not look exactly the same. What matters is the line with a ``sig!`` prefix showing that the QMSK has signed this key. This verifies the authenticity of the RSK. Note that the ``!`` flag after the ``sig`` tag is important because it means that the key signature is valid. A ``sig-`` prefix would indicate a bad signature, and ``sig%`` would mean that gpg encountered an error while verifying the signature. It is not necessary to independently verify the authenticity of the RSK, since you already verified the authenticity of the QMSK."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:393
#: ee363bf439294be08a49af9257d7212e
msgid "As a final sanity check, make sure the RSK is in your keyring with the correct trust level:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:404
#: c680d204521845f2b0318a68da075d1d
msgid "If you don’t see the correct RSK here with a trust level of “full” or higher, go back and follow the instructions in this section carefully, and consult the `troubleshooting FAQ <#troubleshooting-faq>`__ below."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:409
#: 3c84e8889384486ea5e47594800eca9c
msgid "How to obtain and authenticate other signing keys"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:412
#: a70810e19db04c1f8109ba5264201a63
msgid "Please see the :doc:`Qubes security pack </project-security/security-pack>` documentation."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:415
#: 02d09d1dc441488cbd4b7d1c4acd1c91
msgid "How to verify the cryptographic hash values of Qubes ISOs"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:418
#: aef80d799479464d8b64ae2e7ec8217d
msgid "There are two ways to verify Qubes ISOs: cryptographic hash values and detached PGP signatures. Both methods are equally secure. Using just one method is sufficient to verify your Qubes ISO. Using both methods is not necessary, but you can do so if you like. One method might be more convenient than another in certain circumstances, so we provide both. This section covers cryptographic hash values. For the other method, see `how to verify detached PGP signatures on Qubes ISOs <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:431
#: ../../../project-security/verifying-signatures.rst:580
#: ../../../project-security/verifying-signatures.rst:764
#: 1f4779544a56400bbce59600a707a1a4
#: 5aa8ea5ad3ed4d3a85e7df1509b53135
#: 168fc912813b49998d13ee741baa538d
msgid "`Import and authenticate the Qubes Master Signing Key. <#how-to-import-and-authenticate-the-qubes-master-signing-key>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:433
#: ../../../project-security/verifying-signatures.rst:582
#: bbcb7381aea740a1ade38f8528337202
#: 971a479d387141819a8578779873e5c7
msgid "`Import and authenticate your release signing key. <#how-to-import-and-authenticate-release-signing-keys>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:437
#: cb979a8649204ba885bd668ccef63c58
msgid "Each Qubes ISO is accompanied by a set of **cryptographic hash values** contained in a plain text file ending in ``.DIGESTS``, which can find on the :doc:`downloads </user/downloading-installing-upgrading/downloads>` page alongside the ISO. This file contains the output of running several different cryptographic hash functions on the ISO (a process known as “hashing”) to obtain alphanumeric outputs known as “hash values” or “digests.”"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:444
#: c183c5c76aeb473caf0c5cd7d75f39c8
msgid "One convenient property of hash values is that they can be generated on any computer. This means, for example, that you can download a Qubes ISO on one computer, hash it, then visually compare that hash value to the one you generated or have saved on a different computer."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:449
#: ed74d983af7b4f629872e1cbada6e701
msgid "In addition to the ``.DIGESTS`` files on the :doc:`downloads </user/downloading-installing-upgrading/downloads>` page alongside each ISO, and you can always find all the digest files for every Qubes ISO in the :doc:`Qubes security pack </project-security/security-pack>`."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:453
#: 1d7ad08e12a44f4b98e49e642af6b9dd
msgid "If the filename of your ISO is ``Qubes-RX-x86_64.iso``, then the name of the digest file for that ISO is ``Qubes-RX-x86_64.iso.DIGESTS``, where ``X`` is a specific release of Qubes. The digest filename is always the same as the ISO filename followed by ``.DIGESTS``. Since the digest file is a plain text file, you can open it with any text editor. Inside, you should find text that looks similar to this:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:488
#: 449c39b716c04c9da41681fd15b7a0d2
msgid "Four digests have been computed for this ISO. The hash functions used, in order from top to bottom, are MD5, SHA-1, SHA-256, and SHA-512. One way to verify that the ISO you downloaded matches any of these hash values is by using the respective ``*sum`` command:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:509
#: 0066defbb3214b70b77fb52bf8ddc47c
msgid "The ``OK`` response tells us that the hash value for that particular hash function matches. The program also warns us that there are 23 improperly formatted lines, but this is expected. This is because each file contains lines for several different hash values (as mentioned above), but each ``*sum`` program verifies only the line for its own hash function. In addition, there are lines for the PGP signature that the ``*sum`` programs do not know how to read. Therefore, it is safe to ignore these warning lines."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:518
#: 414e89c96ac04c5ea29874524c25536a
msgid "Another way is to use ``openssl`` to compute each hash value, then compare them to the contents of the digest file:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:533
#: 2cfa8e35d689482ead721ceaee70ab74
msgid "(Notice that the outputs match the values from the digest file.)"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:535
#: 3d11899183b3474c9ce438d70248c836
msgid "However, it is possible that an attacker replaced ``Qubes-RX-x86_64.iso`` with a malicious ISO, computed the hash values for that malicious ISO, and replaced the values in ``Qubes-RX-x86_64.iso.DIGESTS`` with his own set of values. Therefore, we should also verify the authenticity of the listed hash values. Since ``Qubes-RX-x86_64.iso.DIGESTS`` is a clearsigned PGP file, we can use GPG to verify the signature in the digest file:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:555
#: fa2a09920a33422fab363f9d816cc005
msgid "This is just an example, so the output you receive will not look exactly the same. What matters is the line that says ``Good signature from \"Qubes OS Release X Signing Key\"``. This confirms that the signature on the digest file is good."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:560
#: ../../../project-security/verifying-signatures.rst:613
#: 3be6080e5f96467c9ce6726d2c0e8764
#: 82b46ebf873a460ba70034740d937e29
msgid "If you don’t see a good signature here, go back and follow the instructions in this section carefully, and consult the `troubleshooting FAQ <#troubleshooting-faq>`__ below."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:564
#: 36d92a801e714c68a76ea5c502821735
msgid "How to verify detached PGP signatures on Qubes ISOs"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:567
#: a80df634bb5f43c0a373505fbad546bf
msgid "There are two ways to verify Qubes ISOs: cryptographic hash values and detached PGP signatures. Both methods are equally secure. Using just one method is sufficient to verify your Qubes ISO. Using both methods is not necessary, but you can do so if you like. One method might be more convenient than another in certain circumstances, so we provide both. This section covers detached PGP signatures. For the other method, see `how to verify the cryptographic hash values of Qubes ISOs <#how-to-verify-the-cryptographic-hash-values-of-qubes-isos>`__."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:586
#: 2aab90c947f3414495e29dc4b956d10a
msgid "Every Qubes ISO is released with a **detached PGP signature** file, which you can find on the :doc:`downloads </user/downloading-installing-upgrading/downloads>` page alongside the ISO. If the filename of your ISO is ``Qubes-RX-x86_64.iso``, then the name of the signature file for that ISO is ``Qubes-RX-x86_64.iso.asc``, where ``X`` is a specific release of Qubes. The signature filename is always the same as the ISO filename followed by ``.asc``."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:593
#: 8ba9b6c54a414b49813fe9b2624ea9da
msgid "Download both the ISO and its signature file. Put both of them in the same directory, then navigate to that directory. Now, you can verify the ISO by executing this GPG command in the directory that contains both files:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:608
#: 48757e1e1e374edab69c06a8044fe0d1
msgid "This is just an example, so the output you receive will not look exactly the same. What matters is the line that says ``Good signature from \"Qubes OS Release X Signing Key\"``. This confirms that the signature on the ISO is good."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:617
#: f7ef763acdac468aac2eda057e1fb1ea
msgid "How to re-verify installation media after writing"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:620
#: 3c248e29f14142bbb4f934dfe8f9e877
msgid "*This is an optional section intended for advanced users.*"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:622
#: 3811e281e2de409fa7ff39526e5a3906
msgid "After you have authenticated your Qubes ISO and written it onto your desired medium (such as a USB drive or optical disc), you can re-verify the data that has been written to your medium. Why would you want to do this when you’ve already verified the original ISO? Well, it’s conceivable that a sufficiently sophisticated adversary might allow your initial ISO verification to succeed (so as not to alert you that your machine has been compromised, for example), then surreptitiously modify the data as it is being written onto your installation medium, resulting in a compromised Qubes installer. This might increase the odds that the attack goes undetected. One way to mitigate this risk is to re-verify the installer after writing it onto an installation medium that cannot be altered, such as a USB drive with a properly-implemented physical write-protect switch and firmware that is either unflashable or cryptographically-signed (or both), as discussed in our :doc:`installation security considerations </user/downloading-installing-upgrading/install-security>`."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:637
#: ec32be2162a541aeb7fd1d47ab283ebf
msgid "This section will walk through an example of re-verifying the installer on such a device. We begin by assuming that you have just :ref:`written your desired Qubes ISO onto the USB drive <user/downloading-installing-upgrading/installation-guide:copying the iso onto the installation medium>`. First, unplug your USB drive and flip the write protect switch so that the data on the drive can no longer be altered. If you have a different computer from the one you used to create the installation medium, consider using that computer. If not, try to at least use a fresh VM (e.g., if it’s a Qubes system). The idea is that the original machine may have been compromised, and using a different one for re-verification forces your hypothetical adversary to compromise an additional machine in order to succeed."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:648
#: 28cd2d61014b472b84e7ed3b6b1b9c10
msgid "Now, our goal is to perform the same verification steps as we did with the original ISO, except, this time, we’ll be reading the installer data directly from the write-protected USB drive instead of from the original ISO file. First, let’s compute the SHA-256 hash value of the data on the drive. (This assumes you’re already familiar with `how to verify the cryptographic hash values of Qubes ISOs <#how-to-verify-the-cryptographic-hash-values-of-qubes-isos>`__.) In order to do this, we have to know the exact size, in bytes, of the original ISO. There are two ways to get this information: from the ISO itself and from the Qubes website. Here’s an example of the first way:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:662
#: 05580e1fa51648c380c3af11a8ad92fb
msgid "(Where ``/dev/sdX`` is your USB drive and ``/path/to/iso`` is the path to your Qubes ISO.)"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:665
#: d5c21f0faeb04934a853b42b38bca822
msgid "This command reads exactly the number of bytes of your Qubes ISO (obtained with ``stat -c %s /path/to/iso``) from the USB drive and pipes them into ``sha256sum``. The output should look something like this:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:677
#: dd5fd17b30894c328d1367316c6b5fca
msgid "Note that your actual SHA-256 hash value and byte number will depend on which Qubes ISO you’re using. This is just an example. Your SHA-256 hash value should match the hash value of your genuine original Qubes ISO."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:681
#: 94fd4e02bb774c0583ff61eb96ce84f8
msgid "Now, reading the number of bytes directly from the ISO is fine, but you may be concerned that a sufficiently sophisticated adversary may have compromised the machine on which you’re performing this re-verification and may therefore be capable of feeding you a false success result. After all, if your adversary knows the answer you’re looking for — namely, a match to the genuine ISO — and has access to that very ISO in the same re-verification environment, then there is little to prevent him from simply hashing the original ISO and feeding you that result (perhaps while also reading from the USB drive and piping it into ``/dev/null`` so that you see the light on the USB drive blinking to support the illusion that the data is being read from the USB drive)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:693
#: 2766b506508746669fac4fe62d2f2bfe
msgid "Therefore, in order to make things a bit more difficult for your hypothetical adversary, you may instead wish to perform the re-verification in an environment that has never seen the original ISO, e.g., a separate offline computer or a fresh VM the storage space of which is too small to hold the ISO. (Note: If you’re doing this in Qubes, you can attach the block device from sys-usb to a separate new qube. You don’t have to perform the re-verification directly in sys-usb.) In that case, you’ll have to obtain the size of the ISO in bytes and enter it into the above command manually. You can, of course, obtain the size by simply using the ``stat -c %s /path/to/iso`` command from above on the machine that has the ISO. You can also obtain it from the Qubes website by hovering over any ISO download button on the :doc:`downloads page </user/downloading-installing-upgrading/downloads>`. (You can also view these values directly in the downloads page’s `source data <https://github.com/QubesOS/qubesos.github.io/blob/master/_data/downloads.yml>`__.) Once you have the exact size of the ISO in bytes, simply insert it into the same command, for example:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:715
#: 255455d7ba694ba2af7065a1a2add566
msgid "If you wish to compute the values of other hash functions, you can replace ``sha256sum``, e.g., with ``md5sum``, ``sha1sum``, or ``sha512sum``."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:719
#: 974f876fa21a48279363a848e0b6cbe5
msgid "In addition to checking hash values, you can also use GnuPG to verify the detached PGP signature directly against the data on the USB drive. (This assumes you’re already familiar with `how to verify detached PGP signatures on Qubes ISOs <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__.)"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:736
#: 9f102430ebcc4dfe97682704ee3bd175
msgid "(Where ``/dev/sdX`` is your USB drive, ``<ISO_SIZE>`` is the size of the original ISO in bytes, and ``Qubes-RX-x86_64.iso.asc`` is the detached signature file of the original ISO.)"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:740
#: a441e1603a394500afff42bfda9c993c
msgid "This command reads the exact number of bytes from your USB drive as the size of the original ISO and pipes them into ``gpg``. The usual form of a ``gpg`` verification command is ``gpg --verify <SIGNATURE> <SIGNED_DATA>``. Our command is using shell redirection in order to use data from your USB drive as the ``<SIGNED_DATA>``, which is why the ``-`` at the end of the command is required. Remember that you still must have properly imported and trusted the `QMSK <#how-to-import-and-authenticate-the-qubes-master-signing-key>`__ and appropriate `RSK <#how-to-import-and-authenticate-release-signing-keys>`__ in order for this to work. You should receive a ``Good signature`` message for the appropriate RSK, which should be signed by a copy of the QMSK that you previously confirmed to be genuine."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:756
#: 7f51aaf19d63415fb7e051c8a88f13af
msgid "How to verify signatures on Git repository tags and commits"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:766
#: 01ed8d298b384daa82f268192fc516ea
msgid ":doc:`Import and authenticate keys from the Qubes security pack (qubes-secpack). </project-security/security-pack>` Please see our :ref:`PGP key policies <project-security/security-pack:pgp key policies>` for important information about these keys."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:771
#: 4ff7fe190f7e4512aba533a2d9a45044
msgid "Whenever you use one of the `Qubes repositories <https://github.com/QubesOS>`__, you should use Git to verify the PGP signature in a tag on the latest commit or on the latest commit itself. (One or both may be present, but only one is required.) If there is no trusted signed tag or commit on top, any commits after the latest trusted signed tag or commit should **not** be trusted. If you come across a repo with any unsigned commits, you should not add any of your own signed tags or commits on top of them unless you personally vouch for the trustworthiness of the unsigned commits. Instead, ask the person who pushed the unsigned commits to sign them."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:781
#: f9fc73d937da45f29a38b05bff4da2b1
msgid "You should always perform this verification on a trusted local machine with properly authenticated keys rather than relying on a third party, such as GitHub. While the GitHub interface may claim that a commit has a verified signature from a member of the Qubes team, this is only trustworthy if GitHub has performed the signature check correctly, the account identity is authentic, an admin has not replaced the user’s key, GitHub’s servers have not been compromised, and so on. Since there’s no way for you to be certain that all such conditions hold, you’re much better off verifying signatures yourself. (Also see: :ref:`distrusting the infrastructure <introduction/faq:what does it mean to \"distrust the infrastructure\"?>`.)"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:792
#: f5d76df6c93d42109c6aedd1ea4186e0
msgid "How to verify a signature on a Git tag"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:800
#: ../../../project-security/verifying-signatures.rst:816
#: 6a7157346806432facdaadf884c5aa97
#: 34daacb095dc4588b019c075047b9e27
msgid "or"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:808
#: 471ca77c54c84cf09daac2bf2be6f957
msgid "How to verify a signature on a Git commit"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:824
#: 1e53e5ab935448448d90ef3788d9ec16
msgid "Troubleshooting FAQ"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:828
#: c951a1a96cae431ca6f62181022b36ae
msgid "Why am I getting \"Can't check signature: public key not found\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:831
#: d2aca66b9375448cbca98a89ccb990e3
msgid "You don’t have the correct `release signing key <#how-to-import-and-authenticate-release-signing-keys>`__."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:834
#: a07cd3f798bb45afb14e83b3743d0018
msgid "Why am I getting \"BAD signature from ‘Qubes OS Release X Signing Key'\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:837
#: 6c9e46edacb448a78942f23ba30cf057
msgid "The problem could be one or more of the following:"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:839
#: f1bef40bdd1f4cd3bd18f0902e231f92
msgid "You’re trying to verify the wrong file(s). Reread this page carefully."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:842
#: e4b5d81e7fe74bd798cf707b41dafd8c
msgid "You’re using the wrong GPG command. Follow the provided examples carefully, or try using ``gpg`` instead of ``gpg2`` (or vice versa)."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:845
#: a55c0c00700f4b91a234d3d3eb4380de
msgid "The ISO or `detached PGP signature file <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__ is bad (e.g., incomplete or corrupt download). Try downloading the signature file again from a different source, then try verifying again. If you still get the same result, try downloading the ISO again from a different source, then try verifying again."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:854
#: 4f1cd06887364978b9e91412e1db9c3b
msgid "Why am I getting \"bash: gpg2: command not found\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:857
#: 2ce124d9997b49db8af6f32835249624
msgid "You don’t have ``gpg2`` installed. Please install it using the method appropriate for your environment (e.g., via your package manager), or try using ``gpg`` instead."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:862
#: 40d5b678c5134019a566cb6572077be0
msgid "Why am I getting \"No such file or directory\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:865
#: 25b9258c4da7450f84c1b0df6b97c37e
msgid "Your working directory does not contain the required files. Go back and follow the instructions more carefully, making sure that you put all required files in the same directory *and* navigate to that directory."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:870
#: c8db6c210bfd46efb670cc0820b1c787
msgid "Why am I getting \"can't open signed data ‘Qubes-RX-x86_64.iso' / can't hash datafile: file open error\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:873
#: ../../../project-security/verifying-signatures.rst:962
#: a63e47f6aa0443e6bac2e5c1576354ff
#: ff9614e3fe304c689ecbf58e3a25399b
msgid "The correct ISO is not in your working directory."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:876
#: 63779c1750a44415a9f13456d315a66c
msgid "Why am I getting \"can't open ‘Qubes-RX-x86_64.iso.asc' / verify signatures failed: file open error\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:879
#: f4bba10a70ee49ada3f08588079a7343
msgid "The correct `detached PGP signature file <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__ is not in your working directory."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:883
#: f3a8997ae3cb410e83d4cb24404744e5
msgid "Why am I getting \"no valid OpenPGP data found\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:886
#: 34efd863a9464fadae223b0bccb43c7a
msgid "Either you don’t have the correct `detached PGP signature file <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__, or you inverted the arguments to ``gpg2``. (The signature file goes first.)"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:890
#: 348a418d3c4e442b8c5677e5c41db0d4
msgid "Why am I getting \"WARNING: This key is not certified with a trusted signature! There is no indication that the signature belongs to the owner.\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:893
#: 929c29888ad646dea7b76f05eec3bc3e
msgid "There are several possibilities: - You don’t have the `Qubes Master Signing Key <#how-to-import-and-authenticate-the-qubes-master-signing-key>`__. - You have not `set the Qubes Master Signing Key’s trust level correctly. <#how-to-import-and-authenticate-the-qubes-master-signing-key>`__ - In the case of a key that is not directly signed by the Qubes Master Signing Key, you have not `set that key’s trust level correctly. <#how-to-verify-signatures-on-git-repository-tags-and-commits>`__"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:899
#: 04e4354b3f7c4322bcb0e693e1d266be
msgid "Why am I getting \"X signature not checked due to a missing key\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:902
#: 0fa3434515a7427097c66323210b9ef1
msgid "You don’t have the keys that created those signatures in your keyring. For the purpose of verifying a Qubes ISO, you don’t need them as long as you have the `Qubes Master Signing Key <#how-to-import-and-authenticate-the-qubes-master-signing-key>`__ and the `release signing key <#how-to-import-and-authenticate-release-signing-keys>`__ for your Qubes release."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:909
#: 76345a90d9f24e3c9b24b6d5b0fc7b74
msgid "Why am I seeing additional signatures on a key with \"[User ID not found]\" or from a revoked key?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:912
#: 9556603d5711419a9e06efb8e8d2a31d
msgid "This is just a fundamental part of how OpenPGP works. Anyone can sign anyone else’s public key and upload the signed public key to keyservers. Everyone is also free to revoke their own keys at any time (assuming they possess or can create a revocation certificate). This has no impact on verifying Qubes ISOs, code, or keys."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:919
#: f75309b325d64aa3b7f5b0107ce2c3d1
msgid "Why am I getting \"verify signatures failed: unexpected data\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:922
#: ../../../project-security/verifying-signatures.rst:928
#: dc3a6e4226ef4992990e885162603b16
#: d28848fb335e45dd9c5255b7963f276f
msgid "You’re not verifying against the correct `detached PGP signature file <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:925
#: 6774d9054a7240379ceb5823504947ed
msgid "Why am I getting \"not a detached signature\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:931
#: 610d990cc3b449e1bf032b4579b8cafe
msgid "Why am I getting \"CRC error; […] no signature found […]\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:934
#: d025907918364fa0a3e538d62a4eefe0
msgid "You’re not verifying against the correct `detached PGP signature file <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__, or the signature file has been modified. Try downloading it again or from a different source."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:939
#: 131c8e7dfadf4273882d652e7b6c7b02
msgid "Do I have to verify both the `detached PGP signature file <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__ and the `cryptographic hash values <#how-to-verify-the-cryptographic-hash-values-of-qubes-isos>`__?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:942
#: b2b065a168be4c40a188fd5fe6305c74
msgid "No, either method is sufficient by itself, but you can do both if you like."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:946
#: 5d9dfe72c49c4dcea10dbe4bddcbf760
msgid "Why am I getting \"no properly formatted X checksum lines found\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:949
#: c7bcf8d3138f4688b9a39615c350a77f
msgid "You’re not checking the correct `cryptographic hash values <#how-to-verify-the-cryptographic-hash-values-of-qubes-isos>`__."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:952
#: 15b6884c935c43e78b9c833880b57878
msgid "Why am I getting \"WARNING: X lines are improperly formatted\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:955
#: 101e7d4ee58742a681f953dd3af24d87
msgid "Read `how to verify the cryptographic hash values of Qubes ISOs <#how-to-verify-the-cryptographic-hash-values-of-qubes-isos>`__ again."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:959
#: 3434236b9d944b92b627cb0d782ab41c
msgid "Why am I getting \"WARNING: 1 listed file could not be read\"?"
msgstr ""

#: ../../../project-security/verifying-signatures.rst:965
#: 8a928be0267f4262a1aa80c331f7f6e7
msgid "I have another problem that isn't mentioned here."
msgstr ""

#: ../../../project-security/verifying-signatures.rst:968
#: 772e991502804c609b31b2e2eb1b3ca0
msgid "Carefully reread this page to be certain that you didn’t skip any steps. In particular, make sure you have the `Qubes Master Signing Key <#how-to-import-and-authenticate-the-qubes-master-signing-key>`__, the `release signing key <#how-to-import-and-authenticate-release-signing-keys>`__ for your Qubes release, *and* the `cryptographic hash values <#how-to-verify-the-cryptographic-hash-values-of-qubes-isos>`__ and/or `detached PGP signature file <#how-to-verify-detached-pgp-signatures-on-qubes-isos>`__, all for the *correct* Qubes OS release. If your question is about GPG, please see the `GnuPG documentation <https://www.gnupg.org/documentation/>`__. Still have question? Please see :doc:`help, support, mailing lists, and forum </introduction/support>` for places where you can ask!"
msgstr ""
