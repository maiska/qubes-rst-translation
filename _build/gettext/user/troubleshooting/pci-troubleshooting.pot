# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 23:45+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../user/troubleshooting/pci-troubleshooting.rst:3
#: ff65a1caf03947b19258e741923d1c73
msgid "PCI troubleshooting"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:7
#: 9682cea6dda04a4ca5373b0ad0bb918f
msgid "DMA errors"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:10
#: bb2645b015cf4d74a6fad30d17f93f0c
msgid "VMs with attached PCI devices in Qubes have allocated a small buffer for DMA operations (called swiotlb). By default, it is 2MB, but some devices (such as the `Realtek RTL8111DL Gigabit Ethernet Controller <https://groups.google.com/group/qubes-devel/browse_thread/thread/631c4a3a9d1186e3>`__) need a larger DMA buffer size. Without a larger buffer, you will face DMA errors such as ``Failed to map TX DMA``."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:16
#: 305e5d2f5cb64b62ba504b1564c5ca85
msgid "To change this allocation, edit VM’s kernel parameters (this is expressed in 512B chunks) by running the following in a dom0 terminal:"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:27
#: 838a846deb13414a9ad6b12674e3af7c
msgid "The ``8192`` value is the default value and some devices may require a larger value (like ``16384``)."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:31
#: 5b7e2707130a47d5ba82169d018d5ea5
msgid "PCI Passthrough Issues"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:34
#: ca55529918ee48f3be654856786608ce
msgid "Sometimes the PCI arbitrator is too strict, which may cause errors such as ``Unable to reset PCI device`` and other PCI-related errors. There is a way to enable permissive mode for it. See also: `this thread <https://groups.google.com/forum/#!topic/qubes-users/Fs94QAc3vQI>`__ and the Xen wiki’s `PCI passthrough <https://wiki.xen.org/wiki/Xen_PCI_Passthrough>`__ page. Other times, you may instead need to disable the FLR requirement on a device."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:41
#: e47b3e20475649d8bd26dada17a482a4
msgid "Both can be achieved during attachment with ``qvm-pci`` as described :ref:`PCI Devices documentation <user/how-to-guides/how-to-use-pci-devices:additional attach options>`."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:45
#: 2037e3ffe6364aac87f8c04ba0181922
msgid "\"Unable to reset PCI device\" errors"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:49
#: 0efb6c3d1a04440e92dd31f57577c673
msgid "libvirt.libvirtError: internal error: Unable to reset PCI device […]: internal error: Active […] devices on bus with […], not doing bus reset"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:52
#: 82bf437e490e4834833ee9ac531ba6ac
msgid "After running ``qvm-start sys-net``, you may encounter an error message which begins with ``libvirt.libvirtError: internal error: Unable to reset PCI device``."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:56
#: 12b64f88c76547008ef09867907b87aa
msgid "This issue is likely to occur if you have the same device assigned to more than one VM. When you try to start sys-net with the ``qvm-start sys-net`` command, there is already a VM running (e.g., auto-starting) with one or more of the same devices as those assigned to sys-net."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:62
#: b7f3464761964f3aafb1418f1581f5c2
msgid "To fix the error, remove the offending PCI device."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:65
#: 99a9119959fa4cbea841c92d05fc5728
msgid "Using the Qubes interface"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:68
#: 7d26fe64de3f4e0fac27064e22ca214c
msgid "From the “Selected” panel in sys-net, navigate to VM Settings, then Devices. There, you can remove the offending PCI device(s) and keep the desired PCI device."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:73
#: e67fa4774b404766b13f66607e1b54bf
msgid "Using the command line"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:76
#: aa9fa71e2cc740ca944a5533de0ab129
msgid "To see all the PCI available devices, enter the ``lspci`` command into the dom0 terminal. Each device will be listed on a line, for example:"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:85
#: 789b90f7530647e0b33be789e0fc32be
msgid "In the above output, the BDF (Bus Device Function) of the device is ``0000:03:00.0``"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:88
#: ed8e09bf64414f1e888311b3dd241222
msgid "Now that you can see all the PCI devices and their BDFs, you can decide which to remove and which to keep. Imagine we faced the following error message:"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:97
#: dbcb4e7713f54388a63757983ee7bf89
msgid "In the above case, the device ``0000:03:00.1`` is the device which we want to use. But we are facing the ``Unable to reset PCI device`` error because another device, ``0000:03:00.0``, is active. To fix this error and get device ``0000:03:00.1`` to work, we must first remove the offending device ``0000:03:00.0``."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:110
#: d7f53f64384c4704975dc2a686b6cabf
msgid "In order to make this change persistent, create a file ``/etc/systemd/system/qubes-pre-netvm.service`` and add the following:"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:129
#: 3b0d7efa9cc94883abb82825bbe1184d
msgid "Finally, run ``systemctl enable qubes-pre-netvm.service`` and it will now persist between reboots."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:135
#: 20e6ff46ab3f4a7c85ea67f502b35c85
msgid "Domain […] has failed to start: internal error: Unable to reset PCI device […]: no FLR, PM reset or bus reset available"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:138
#: f15433c95ad24b77b794d5406cdca52d
msgid "This is a :ref:`PCI passthrough issue <user/troubleshooting/pci-troubleshooting:pci passthrough issues>`, which occurs when PCI arbitrator is too strict. There is a way to enable permissive mode for it. Sometimes, you may instead need to disable the FLR requirement on a device. Both can be achieved during attachment with ``qvm-pci`` as described below."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:144
#: ea7ecf41107049c9947d6b817e543a6e
msgid "NOTE: The ``permissive`` flag increases attack surface and possibility of `side channel attacks <https://en.wikipedia.org/wiki/Side-channel_attack>`__. While using the ``no-strict-reset`` flag, do not require PCI device to be reset before attaching it to another VM. This may leak usage data even without malicious intent. Both ``permissive`` and ``no-strict-reset`` options may not be necessary and you should try one first, then the other, before using both."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:158
#: 8016ba813dad4350bc1aeca0d7f64119
msgid "Be sure to replace ``<BDF_OF_DEVICE>`` with the BDF of your PCI device, which can be be obtained from running ``qvm-pci``."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:161
#: defba5e8a6e7483ea27e3302c383a3a7
msgid "You can also configure strict reset directly from the Qubes interface by following these steps:"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:164
#: 6ea94ffb16d24bdaa8ad3ea82e247643
msgid "Go to the sys-net VM settings"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:166
#: b8a596d2fb8d49afb45811ac33465f16
msgid "Go to Devices"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:168
#: c7a5c92b8168457f831d2b2704e4a686
msgid "Make sure the device is in the right field"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:170
#: ccf96b523ce34069a2bbba98573dce37
msgid "Click “Configure strict reset for PCI devices”"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:172
#: 128a98dff14f48038b7226d3f23a8242
msgid "Select the device, click OK and apply"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:177
#: 1794eabc26034c3ea094b2070018b9dc
msgid "Broadcom BCM43602 Wi-Fi card causes system freeze"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:180
#: fa8dcaa3a5ae443e8a99d665946acb67
msgid "You may face the problem where the BCM43602 Wi-Fi chip causes a system freeze whenever it is attached to a VM. To fix this problem on a Macbook, follow the steps in `Macbook Troubleshooting <https://github.com/Qubes-Community/Contents/blob/master/docs/troubleshooting/macbook-troubleshooting.md#system-freezes-after-attaching-broadcom-bcm43602-wi-fi-card>`__."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:184
#: d2c59223730f4e758b76433fd3f0652e
msgid "For other non-Macbook machines, it is advisable to replace the Broadcom BCM43602 with one known to work on Qubes, such as the Atheros AR9462."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:187
#: e9ce01b16e7c40bda947fd6702f02639
msgid "Note that your computer manufacturer may have added a Wi-Fi card whitelist in your BIOS, which will prevent booting your computer if you have a non-listed wireless card. It is possible bypass this limitation by removing the whitelist, disabling a check for it or modifying the whitelist to replace device ID of a whitelisted WiFi card with device ID of your new WiFi card."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:195
#: 753df51bf3394a339dc8244700dfaed5
msgid "Wireless card stops working after dom0 update"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:198
#: 233df25741ec483f9b424d94df41d241
msgid "There have been many instances where a Wi-Fi card stops working after a dom0 update. If you run ``sudo dmesg`` in sys-net, you may see errors beginning with ``iwlwifi``. You can fix the problem by going to the sys-net VM’s settings and changing the VM kernel to the previous version."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:205
#: 5f794cbad34441418bce0c210d7cdc48
msgid "Attached devices in Windows HVM stop working on suspend/resume"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:208
#: b9475908a6cf417787490c0aa89e6745
msgid "After the whole system gets suspended into S3 sleep and subsequently resumed, some attached devices may stop working. Refer to :ref:`Suspend/Resume Troubleshooting <user/troubleshooting/resume-suspend-troubleshooting:attached devices in windows hvm stop working on suspend\\/resume>` for a solution."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:214
#: 4c939512443c43349b439b9104dcb329
msgid "PCI device not available in dom0 after being unassigned from a qube"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:217
#: c1ae6e3cc5884ede8576c1cf3ca09cea
msgid "After you assign a PCI device to a qube, then unassign it/shut down the qube, the device is not available in dom0. This is an intended feature. A device which was previously assigned to a less trusted qube could attack dom0 if it were automatically reassigned there. Look at the :ref:`FAQs <introduction/faq:i assigned a pci device to a qube, then unassigned it\\/shut down the qube. why isn't the device available in dom0?>` to learn how to re-enable the device in dom0."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:225
#: 5d024ee6628b4fed876444d9196ee8c7
msgid "Network adapter does not work"
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:228
#: 00f6334d4f5141e7957dc30acb20a162
msgid "You may have an adapter (wired, wireless), that is not compatible with open-source drivers shipped by Qubes. You may need to install a binary blob, which provides drivers, from the linux-firmware package."
msgstr ""

#: ../../../user/troubleshooting/pci-troubleshooting.rst:232
#: fa4dc88d99404c8188883e03f371ad68
msgid "Open a terminal and run ``sudo dnf install linux-firmware`` in the template upon which your NetVM is based. You have to restart the NetVM after the template has been shut down."
msgstr ""
