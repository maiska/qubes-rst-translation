# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-16 23:45+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../user/security-in-qubes/split-gpg.rst:3
#: 4c02cd8eaeac42f0a3ac4673ca3afbff
msgid "Split GPG"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:6
#: e6f55c0df4124c6ea94259496d977263
msgid "Split GPG implements a concept similar to having a smart card with your private GPG keys, except that the role of the “smart card” is played by another Qubes app qube. This way one not-so-trusted domain, e.g. the one where Thunderbird is running, can delegate all crypto operations – such as encryption/decryption and signing – to another, more trusted, network-isolated domain. This way the compromise of your domain where Thunderbird or another client app is running – arguably a not-so-unthinkable scenario – does not allow the attacker to automatically also steal all your keys. (We should make a rather obvious comment here that the so-often-used passphrases on private keys are pretty meaningless because the attacker can easily set up a simple backdoor which would wait until the user enters the passphrase and steal the key then.)"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:20
#: d416dad0fa9b465191fe79ce1a721b29
msgid "|split-gpg-diagram.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 7596d949b645454fb376ed81f68f1007
#: 23ba314c921844ceb84140d6f602bc32
msgid "split-gpg-diagram.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:22
#: 828266368d794891a4a6bb4e7deb72a8
msgid "This diagram presents an overview of the Split GPG architecture."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:25
#: 5b326dc0c8f2416f8818c571694f3393
msgid "Advantages of Split GPG vs. traditional GPG with a smart card"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:28
#: 2201f042aa644480ae04cc7194c970fb
msgid "It is often thought that the use of smart cards for private key storage guarantees ultimate safety. While this might be true (unless the attacker can find a usually-very-expensive-and-requiring-physical-presence way to extract the key from the smart card) but only with regards to the safety of the private key itself. However, there is usually nothing that could stop the attacker from requesting the smart card to perform decryption of all the user documents the attacker has found or need to decrypt. In other words, while protecting the user’s private key is an important task, we should not forget that ultimately it is the user data that are to be protected and that the smart card chip has no way of knowing the requests to decrypt documents are now coming from the attacker’s script and not from the user sitting in front of the monitor. (Similarly the smart card doesn’t make the process of digitally signing a document or a transaction in any way more secure – the user cannot know what the chip is really signing. Unfortunately this problem of signing reliability is not solvable by Split GPG)"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:46
#: 819444927d504bedb7851383da38982b
msgid "With Qubes Split GPG this problem is drastically minimized, because each time the key is to be used the user is asked for consent (with a definable time out, 5 minutes by default), plus is always notified each time the key is used via a tray notification from the domain where GPG backend is running. This way it would be easy to spot unexpected requests to decrypt documents."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:53
#: 544026e94cca44b0ac1358a41d2ef29d
msgid "|r2-split-gpg-1.png| |r2-split-gpg-3.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 2fb798d7355649bc9ae4430fc14d2c8f
#: da76736465094abeba02aba7baf2a38e
msgid "r2-split-gpg-1.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 32d05fb598004189839f4a2922c56a1c
#: 8ef90e250bf3422fa9ba6b61b5236233
msgid "r2-split-gpg-3.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:56
#: 3aa8e98b85724356b944a1c0499dc737
msgid "Configuring Split GPG"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:59
#: f0dc83163ebd40528d6c85575d56b562
msgid "In dom0, make sure the ``qubes-gpg-split-dom0`` package is installed."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:66
#: fd02161224b643b3a5dc9aaff291fe11
msgid "Make sure you have the ``qubes-gpg-split`` package installed in the template you will use for the GPG domain."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:69
#: 6aaa7d3f2edb44029a65c2c04591135f
msgid "For Debian or Whonix:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:77
#: 0f18dc00dbe54a26ad53b9fb840c024e
msgid "For Fedora:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:86
#: 761b2efd09fc43e385cc9a1a1935eb82
msgid "Setting up the GPG backend domain"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:89
#: dc0eedebdb8147dda56686319012e875
msgid "First, create a dedicated app qube for storing your keys (we will be calling it the GPG backend domain). It is recommended that this domain be network disconnected (set its netvm to ``none``) and only used for this one purpose. In later examples this app qube is named ``work-gpg``, but of course it might have any other name."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:95
#: b9ab5ddfd7f7495a9e02dd6174aa8ddb
msgid "Make sure that gpg is installed there. At this stage you can add the private keys you want to store there, or you can now set up Split GPG and add the keys later. To check which private keys are in your GPG keyring, use:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:111
#: 4fbede249a954c7db055fc3abb9aead6
msgid "This is pretty much all that is required. However, you might want to modify the default timeout: this tells the backend for how long the user’s approval for key access should be valid. (The default is 5 minutes.) You can change this via the ``QUBES_GPG_AUTOACCEPT`` environment variable. You can override it e.g. in ``~/.profile``:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:122
#: d3ee6c95168d43acadbd39e4667343fe
msgid "Please note that previously, this parameter was set in ~/.bash_profile. This will no longer work. If you have the parameter set in ~/.bash_profile you *must* update your configuration."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:126
#: 283276e0e23e4c01adc1414a35038b9e
msgid "Please be aware of the caveat regarding passphrase-protected keys in the `Current limitations <#current-limitations>`__ section."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:130
#: 86b9c8335a734f339963480896ec685d
msgid "Configuring the client apps to use Split GPG backend"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:133
#: 5b3e188bf41d45b4820d3ef68be1f1d7
msgid "Normally it should be enough to set the ``QUBES_GPG_DOMAIN`` to the GPG backend domain name and use ``qubes-gpg-client`` in place of ``gpg``, e.g.:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:153
#: a2144176488d4ad88040db0ef5958880
msgid "Note that running normal ``gpg -K`` in the demo above shows no private keys stored in this app qube."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:156
#: b7d49831acbe4b34abe9b4ecba25f482
msgid "A note on ``gpg`` and ``gpg2``:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:158
#: afe14c74a2db40388d8bf220fdf1def5
msgid "Throughout this guide, we refer to ``gpg``, but note that Split GPG uses ``gpg2`` under the hood for compatibility with programs like Enigmail (which now supports only ``gpg2``). If you encounter trouble while trying to set up Split GPG, make sure you’re using ``gpg2`` for your configuration and testing, since keyring data may differ between the two installations."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:166
#: c11f3138d42d4e2393cc4364e3668875
msgid "Advanced Configuration"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:169
#: 91984d0c37d840f3840e14525bfeebf1
msgid "The ``qubes-gpg-client-wrapper`` script sets the ``QUBES_GPG_DOMAIN`` variable automatically based on the content of the file ``/rw/config/gpg-split-domain``, which should be set to the name of the GPG backend VM. This file survives the app qube reboot, of course."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:180
#: 97da7417d2a94be6987a60be9e176384
msgid "Split GPG’s default qrexec policy requires the user to enter the name of the app qube containing GPG keys on each invocation. To improve usability for applications like Thunderbird with Enigmail, in ``dom0`` place the following line at the top of the file ``/etc/qubes-rpc/policy/qubes.Gpg``:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:192
#: 203542a0e6ff480bb9e13a8ccd9f8f36
msgid "where ``work-email`` is the Thunderbird + Enigmail app qube and ``work-gpg`` contains your GPG keys."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:195
#: 84711167726f41078dc4bff868274623
msgid "You may also edit the qrexec policy file for Split GPG in order to tell Qubes your default gpg vm (qrexec prompts will appear with the gpg vm preselected as the target, instead of the user needing to type a name in manually). To do this, append ``,default_target=<vmname>`` to ``ask`` in ``/etc/qubes-rpc/policy/qubes.Gpg``. For the examples given on this page:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:208
#: 942c49e4be6e4bb4870d431a1785435a
msgid "Note that, because this makes it easier to accept Split GPG’s qrexec authorization prompts, it may decrease security if the user is not careful in reviewing presented prompts. This may also be inadvisable if there are multiple app qubes with Split GPG set up."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:214
#: 9f3929435bc94911bef2b7a9b35a6f9b
msgid "Using Thunderbird"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:218
#: 2899f162764746cda1f6da7891988659
msgid "Thunderbird 78 and higher"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:221
#: a54d7af627fe45fda788fa3303e303ab
msgid "Starting with version 78, Thunderbird has a built-in PGP feature and no longer requires the Enigmail extension. For users coming from the Enigmail extension, the built-in functionality is more limited currently, including that **public keys must live in your ``work-email`` qube with Thunderbird rather than your offline ``work-gpg`` qube**."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:226
#: 074fd73f87cb4eafa09812447d153147
msgid "In ``work-email``, use the Thunderbird config editor (found at the bottom of preferences/options), and search for ``mail.openpgp.allow_external_gnupg``. Switch the value to true. Still in config editor, search for ``mail.openpgp.alternative_gpg_path``. Set its value to ``/usr/bin/qubes-gpg-client-wrapper``. Restart Thunderbird after this change."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:233
#: b87a7b7ce5e7447dad7419b88865f908
msgid "|tb78-1.png| |tb78-2.png| |tb78-3.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 21f178338b704d57a115228f88411f61
#: 831827e426c348749156b0ecac509133
msgid "tb78-1.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 9dbb8f67821b4c93be3a9bcc7df3bee3
#: 029f5153a6e443e6a84ded5fc7846e6c
msgid "tb78-2.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 7225914fe472417393ee3da2eac2735e
#: db3fb52ffb314e3bbdb713d81108dc5e
msgid "tb78-3.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:235
#: 5c20c26636d540178fb200ececae483b
msgid "You need to obtain your key ID which should be **exactly 16 characters**. Enter the command ``qubes-gpg-client-wrapper -K --keyid-format long``:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:256
#: 859f64e10435423881285f43636ed0e6
msgid "Open the Account Settings and open the *End-to-End Encryption* tab of the respective email account. Click the *Add Key* button. You’ll be offered the choice *Use your external key through GnuPG*. Select it and click Continue."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:261
#: 56ea612ac2ad45cc86db1a8426d1f5af
msgid "|tb78-4.png| |tb78-5.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 64fbdda9df8343569154ec97007145fc
#: 50be7dda41ab47c78351c17e96145df5
msgid "tb78-4.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 0ff33e683021432993232df7c1aa050b
#: a43207711c57473c9e440f9eb11f2078
msgid "tb78-5.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:263
#: 44d28624a4c64230bcc89712e54683c7
msgid "The key ID reference you would need here is ``777402E6D301615C``. Now paste or type the ID of the secret key that you would like to use. Be careful to enter it correctly, because your input isn’t verified. Confirm to save this key ID. Now you can select the key ID to use."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:268
#: 1bebd6e6398a4f0b9fe243f66922d85d
msgid "|tb78-6.png| |tb78-7.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 9ae012a43cf048e4a2f0a3271dffb140
#: 011cee7bd62543dcb2efde250dd4cb0f
msgid "tb78-6.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: a2eef1ea14f24e7da7dc7d8236ff84e0
#: 9ef82391a20c4d22a4a7e2131883cab4
msgid "tb78-7.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:270
#: 5be45b9425b44affbb02090cec8a00dd
msgid "This key ID will be used to digitally sign or send an encrypted message with your account. For this to work, Thunderbird needs a copy of your public key. At this time, Thunderbird doesn’t fetch the public key from ``/usr/bin/qubes-gpg-client-wrapper``, you must manually import it. Export the key as follow (assuming the key ID would be ``777402E6D301615C``):"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:277
#: 42ce2f8cc38248e3b15ed6ba194c8f3b
msgid "|tb78-8.png| |tb78-9.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 5be846f1edf34c1ebf2a5a5e47116127
#: 32c73d6432114778987caece88dc9a56
msgid "tb78-8.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 347bc98a19b7409b93ea858153daa843
#: ed6037537bb941038e6e6fbc4892150f
msgid "tb78-9.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:279
#: 69ff9460d89f46da97e1b7c2d090df24
msgid "Use Thunderbird’s Tools menu to open *OpenPGP Key Management*. In that window, use the File menu to access the *Import Public Key(s) From File* command. Open the file with your public key. After the import was successful, right click on the imported key in the list and select *Key Properties*. You must mark your own key as *Yes, I’ve verified in person this key has the correct fingerprint*."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:284
#: 5177b3b3c26a4d1e87377b6bbf51d967
msgid "Once this is done, you should be able to send an encrypted and signed email by selecting *Require Encryption* or *Digitally Sign This Message* in the compose menu *Options* or *Security* toolbar button. You can try it by sending an email to yourself."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:289
#: 5c345902c27647dfa9b58e288931ca69
msgid "|tb78-10.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 183b89578c2f4021bd0eac1c1ef3e3fd
#: be291c62deee4d4793eaa6a790b1366a
msgid "tb78-10.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:291
#: 5d127e7a5a8640fe8f4958ffb10c95b5
msgid "For more details about using smart cards/Split GPG with Thunderbird PGP feature, please see `Thunderbird:OpenPGP:Smartcards <https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards>`__ from which the above documentation is inspired."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:297
#: d8927993e44f4b9abe93f09e26098618
msgid "Older Thunderbird versions"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:300
#: 74c3171e52e84de28ba155304d00f874
msgid "For Thunderbird versions below 78, the traditional Enigmail + Split GPG setup is required. It is recommended to set up and use ``/usr/bin/qubes-gpg-client-wrapper``, as discussed above, in Thunderbird through the Enigmail addon."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:305
#: 9de53672729a4139bb146ea1ca00b7e4
msgid "**Warning:** Before adding any account, configuring Enigmail with ``/usr/bin/qubes-gpg-client-wrapper`` is **required**. By default, Enigmail will generate a default GPG key in ``work-email`` associated with the newly created Thunderbird account. Generally, it corresponds to the email used in ``work-gpg`` associated to your private key. In consequence, a new, separate private key will be stored in ``work-email`` but it *does not* correspond to your private key in ``work-gpg``. Comparing the ``fingerprint`` or ``expiration date`` will show that they are not the same private key. In order to prevent Enigmail using this default generated local key in ``work-email``, you can safely remove it."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:317
#: a0577230ec9844e095d79fc483a62720
msgid "On a fresh Enigmail install, your need to change the default ``Enigmail Junior Mode``. Go to Thunderbird preferences and then privacy tab. Select ``Force using S/MIME and Enigmail``. Then, in the preferences of Enigmail, make it point to ``/usr/bin/qubes-gpg-client-wrapper`` instead of the standard GnuPG binary:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:324
#: 597d5514ee444871a6771096fd8aac79
msgid "|tb-enigmail-split-gpg-settings-2.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 47683b00309840658af3f23bbf9b5b78
#: ba44b85dc77d45a8b27c5f75662518e3
msgid "tb-enigmail-split-gpg-settings-2.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:327
#: 9998c2b731464a1ca12cccd7d73f24ed
msgid "Using Keybase with Split GPG"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:330
#: 2bfe618984a14db689eb2a32b8dd15a6
msgid "Keybase, a security focused messaging and file-sharing app with GPG integration, can be configured to use Split GPG."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:333
#: 70ad40afdd08418aa20c3c94626a1aa1
msgid "The Keybase service does not preserve/pass the ``QUBES_GPG_DOMAIN`` environment variable through to underlying GPG processes, so it **must** be configured to use ``/usr/bin/qubes-gpg-client-wrapper`` (as discussed above) rather than ``/usr/bin/qubes-gpg-client``."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:338
#: 547f91c7240b40e3bea30a36f4420cd4
msgid "The following command will configure Keybase to use ``/usr/bin/qubes-gpg-client-wrapper`` instead of its built-in GPG client:"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:348
#: 5e843f94436040f29f0d2dc2b24fb08b
msgid "Now that Keybase is configured to use ``qubes-gpg-client-wrapper``, you will be able to use ``keybase pgp select`` to choose a GPG key from your backend GPG app qube and link that key to your Keybase identity."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:353
#: b802b2b132fe4021885d8dd3b8091b16
msgid "Using Git with Split GPG"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:356
#: 74578252fd584b0fae060d86e6e9cccd
msgid "Git can be configured to utilize Split GPG, something useful if you would like to contribute to the Qubes OS Project as every commit is required to be signed. The most basic ``~/.gitconfig`` file enabling Split GPG looks something like this."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:373
#: a3f584389dd94836b87eb44cb43743e9
msgid "Your key id is the public id of your signing key, which can be found by running ``qubes-gpg-client --list-keys``. In this instance, the key id is E142F75A6B1B610E0E8F874FB45589245791CACB."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:390
#: 6d7e59ec59e24b3595907a572b2d1c8d
msgid "To sign commits, you now add the “-S” flag to your commit command, which should prompt for Split GPG usage. If you would like to automatically sign all commits, you can add the following snippet to ``~/.gitconfig``."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:401
#: 31aa8e9047a044e382692e7b46f20e1f
msgid "Lastly, if you would like to add aliases to sign and verify tags using the conventions the Qubes OS Project recommends, refer to the :ref:`code signing documentation <developer/code/code-signing:using pgp with git>`."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:405
#: 00e6f50625cb43bfa5db5edaeef465e7
msgid "Importing public keys"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:408
#: fd0c2d4698134d25b738daac04983919
msgid "Use ``qubes-gpg-import-key`` in the client app qube to import the key into the GPG backend VM."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:417
#: 122b51c2993c4ed5ae3c61d29395b140
msgid "A safe, unspoofable user consent dialog box is displayed."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:419
#: 97723d9af0a5422abd6eed1ec50e7888
msgid "|r2-split-gpg-5.png|"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:0
#: ../../../user/security-in-qubes/split-gpg.rst:0
#: 81e646025aa64aa7a6c3c66764e0cf7e
#: 7a825ff96439477dac6cf7d3ada9e788
msgid "r2-split-gpg-5.png"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:421
#: 70a48b4cf05243eb92561bb2d661fb74
msgid "Selecting “Yes to All” will add a line in the corresponding :doc:`RPC Policy </user/advanced-topics/rpc-policy>` file."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:424
#: 8a5d6ac97500465ebea8f762fd350a47
msgid "Advanced: Using Split GPG with Subkeys"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:427
#: 29a2c65e34c242b5b30117fb46483609
msgid "Users with particularly high security requirements may wish to use Split GPG with `subkeys <https://wiki.debian.org/Subkeys>`__. However, this setup comes at a significant cost: It will be impossible to sign other people’s keys with the master secret key without breaking this security model. Nonetheless, if signing others’ keys is not required, then Split GPG with subkeys offers unparalleled security for one’s master secret key."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:436
#: 4ca88ae5272342e5833758c1956bcfee
msgid "Setup Description"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:439
#: 5c0c5020095c4a679004d12abf35af39
msgid "In this example, the following keys are stored in the following locations (see below for definitions of these terms):"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:447
#: b860f5e433da4913b24fd823ebb33498
msgid "PGP Key(s)"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:448
#: a39fdcfbc26547a7861112adb9c66fe6
msgid "VM Name"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:449
#: fc8e8b88ad944710bbee48a94e86c817
msgid "sec"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:450
#: 3d9f903e907f45e38c5f05caf883d873
msgid "vault"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:451
#: 8a9b2c418eb14a5b80490aa781315663
msgid "ssb"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:452
#: 38dd376ad7514f82b0c99ca55927dbad
msgid "work-gpg"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:453
#: cdf7eccf07324fb8aca7f48d4bbe0499
msgid "pub"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:454
#: b621d14240bd4344bd956dd8b1d76bfc
msgid "work-email"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:458
#: 6576d4137b7445f28542fc2dd0322746
msgid "``sec`` (master secret key) Depending on your needs, you may wish to create this as a **certify-only (C)** key, i.e., a key which is capable only of signing (a.k.a., “certifying”) other keys. This key may be created *without* an expiration date. This is for two reasons. First, the master secret key is never to leave the ``vault`` VM, so it is extremely unlikely ever to be obtained by an adversary (see below). Second, an adversary who *does* manage to obtain the master secret key either possesses the passphrase to unlock the key (if one is used) or does not. An adversary who *does* possess the passphrase can simply use it to legally extend the expiration date of the key (or remove it entirely). An adversary who does *not* possess the passphrase cannot use the key at all. In either case, an expiration date provides no additional benefit. By the same token, however, having a passphrase on the key is of little value. An adversary who is capable of stealing the key from your ``vault`` would almost certainly also be capable of stealing the passphrase as you enter it. An adversary who obtains the passphrase can then use it in order to change or remove the passphrase from the key. Therefore, using a passphrase at all should be considered optional. It is, however, recommended that a **revocation certificate** be created and safely stored in multiple locations so that the master keypair can be revoked in the (exceedingly unlikely) event that it is ever compromised."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:482
#: 06823e0cec084daa8f115b247bd19654
msgid "``ssb`` (secret subkey) Depending on your needs, you may wish to create two different subkeys: one for **signing (S)** and one for **encryption (E)**. You may also wish to give these subkeys reasonable expiration dates (e.g., one year). Once these keys expire, it is up to you whether to *renew* these keys by extending the expiration dates or to create *new* subkeys when the existing set expires. On the one hand, an adversary who obtains any existing encryption subkey (for example) will be able to use it in order to decrypt all emails (for example) which were encrypted to that subkey. If the same subkey were to continue to be used–and its expiration date continually extended–only that one key would need to be stolen (e.g., as a result of the ``work-gpg`` VM being compromised; see below) in order to decrypt *all* of the user’s emails. If, on the other hand, each encryption subkey is used for at most approximately one year, then an adversary who obtains the secret subkey will be capable of decrypting at most approximately one year’s worth of emails. On the other hand, creating a new signing subkey each year without renewing (i.e., extending the expiration dates of) existing signing subkeys would mean that all of your old signatures would eventually read as “EXPIRED” whenever someone attempts to verify them. This can be problematic, since there is no consensus on how expired signatures should be handled. Generally, digital signatures are intended to last forever, so this is a strong reason against regularly retiring one’s signing subkeys."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:508
#: 4bb60601d8c043a4a07785a9e281cba4
msgid "``pub`` (public key) This is the complement of the master secret key. It can be uploaded to keyservers (or otherwise publicly distributed) and may be signed by others."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:513
#: 89de058eee5f445fa8a5bbbaf083e550
msgid "``vault`` This is a network-isolated VM. The initial master keypair and subkeys are generated in this VM. The master secret key *never* leaves this VM under *any* circumstances. No files or text is *ever* :ref:`copied <user/how-to-guides/how-to-copy-and-move-files:security>` or :ref:`pasted <user/how-to-guides/how-to-copy-and-paste-text:security>` into this VM under *any* circumstances."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:521
#: a8c839039f074eed804a4e40ba28399c
msgid "``work-gpg`` This is a network-isolated VM. This VM is used *only* as the GPG backend for ``work-email``. The secret subkeys (but *not* the master secret key) are :ref:`copied <user/how-to-guides/how-to-copy-and-move-files:security>` from the ``vault`` VM to this VM. Files from less trusted VMs are *never* :ref:`copied <user/how-to-guides/how-to-copy-and-move-files:security>` into this VM under *any* circumstances."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:530
#: d8722e9baf344bb197d20e69a34633ca
msgid "``work-email`` This VM has access to the mail server. It accesses the ``work-gpg`` VM via the Split GPG protocol. The public key may be stored in this VM so that it can be attached to emails and for other such purposes."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:538
#: 8cee98e196ea4855be0c5c4d49378e0e
msgid "Security Benefits"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:541
#: 16334302b46341ce9c2373aa5ca43799
msgid "In the standard Split GPG setup, there are at least two ways in which the ``work-gpg`` VM might be compromised. First, an attacker who is capable of exploiting a hypothetical bug in ``work-email``’s `MUA <https://en.wikipedia.org/wiki/Mail_user_agent>`__ could gain control of the ``work-email`` VM and send a malformed request which exploits a hypothetical bug in the GPG backend (running in the ``work-gpg`` VM), giving the attacker control of the ``work-gpg`` VM. Second, a malicious public key file which is imported into the ``work-gpg`` VM might exploit a hypothetical bug in the GPG backend which is running there, again giving the attacker control of the ``work-gpg`` VM. In either case, such an attacker might then be able to leak both the master secret key and its passphrase (if any is used, it would regularly be input in the work-gpg VM and therefore easily obtained by an attacker who controls this VM) back to the ``work-email`` VM or to another VM (e.g., the ``netvm``, which is always untrusted by default) via the Split GPG protocol or other :doc:`covert channels </user/security-in-qubes/data-leaks>`. Once the master secret key is in the ``work-email`` VM, the attacker could simply email it to himself (or to the world)."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:560
#: aa4d66f0ea364ce1bac4642c51587157
msgid "In the alternative setup described in this section (i.e., the subkey setup), even an attacker who manages to gain access to the ``work-gpg`` VM will not be able to obtain the user’s master secret key since it is simply not there. Rather, the master secret key remains in the ``vault`` VM, which is extremely unlikely to be compromised, since nothing is ever copied or transferred into it. * The attacker might nonetheless be able to leak the secret subkeys from the ``work-gpg`` VM in the manner described above, but even if this is successful, the secure master secret key can simply be used to revoke the compromised subkeys and to issue new subkeys in their place. (This is significantly less devastating than having to create a new *master* keypair.)"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:572
#: a71d93beddd04aa9bbb7718a6b87de97
msgid "*In order to gain access to the ``vault`` VM, the attacker would require the use of, e.g., a general Xen VM escape exploit or a :ref:`signed, compromised package which is already installed in the template <user/templates/templates:trusting your templates>` upon which the ``vault`` VM is based."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:577
#: 5803183a2b3a4d0fa297b5431490dda3
msgid "Subkey Tutorials and Discussions"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:580
#: 2e7c6c8146ba4db09ffbb18b5652fb85
msgid "(Note: Although the tutorials below were not written with Qubes Split GPG in mind, they can be adapted with a few commonsense adjustments. As always, exercise caution and use your good judgment.)"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:584
#: 4784c01d86bc4121b15e9caac9133771
msgid "`“OpenPGP in Qubes OS” on the qubes-users mailing list <https://groups.google.com/d/topic/qubes-users/Kwfuern-R2U/discussion>`__"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:586
#: 09c358238ddb448e8f89c5195e15b806
msgid "`“Creating the Perfect GPG Keypair” by Alex Cabal <https://alexcabal.com/creating-the-perfect-gpg-keypair/>`__"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:588
#: f50a09067c8247e4a5f988aa1a37c0fb
msgid "`“GPG Offline Master Key w/ smartcard” maintained by Abel Luck <https://gist.github.com/abeluck/3383449>`__"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:590
#: b314d8fe4ba54a4d86acba78b000f83f
msgid "`“Using GnuPG with QubesOS” by Alex <https://apapadop.wordpress.com/2013/08/21/using-gnupg-with-qubesos/>`__"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:595
#: be2feb27ba0645e7bec2a2823c0b250f
msgid "Current limitations"
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:598
#: 6d91e5de11f64397a6ba2ba18629c632
msgid "Current implementation requires importing of public keys to the vault domain. This opens up an avenue to attack the gpg running in the backend domain via a hypothetical bug in public key importing code. See ticket `#474 <https://github.com/QubesOS/qubes-issues/issues/474>`__ for more details and plans how to get around this problem, as well as the section on `using Split GPG with subkeys <#advanced-using-split-gpg-with-subkeys>`__."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:606
#: 402668f007e241c397a420defcd3b62d
msgid "It doesn’t solve the problem of allowing the user to know what is to be signed before the operation gets approved. Perhaps the GPG backend domain could start a disposable and have the to-be-signed document displayed there? To Be Determined."
msgstr ""

#: ../../../user/security-in-qubes/split-gpg.rst:611
#: 588a8a53634043548f125b1e630080a3
msgid "The Split GPG client will fail to sign or encrypt if the private key in the GnuPG backend is protected by a passphrase. It will give an ``Inappropriate ioctl for device`` error. Do not set passphrases for the private keys in the GPG backend domain. Doing so won’t provide any extra security anyway, as explained in the introduction and in `using Split GPG with subkeys <#advanced-using-split-gpg-with-subkeys>`__. If you are generating a new key pair, or if you have a private key that already has a passphrase, you can use ``gpg2 --edit-key <key_id>`` then ``passwd`` to set an empty passphrase. Note that ``pinentry`` might show an error when you try to set an empty passphrase, but it will still make the change. (See `this StackExchange answer <https://unix.stackexchange.com/a/379373>`__ for more information.) Note: The error shows only if you **do not** have graphical pinentry installed."
msgstr ""
